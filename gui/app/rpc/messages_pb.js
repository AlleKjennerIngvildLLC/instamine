/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var xmr_pb = require('./xmr_pb.js');
var command_pb = require('./command_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.cauchy.Connection', null, global);
goog.exportSymbol('proto.cauchy.DifficultyChange', null, global);
goog.exportSymbol('proto.cauchy.Empty', null, global);
goog.exportSymbol('proto.cauchy.End', null, global);
goog.exportSymbol('proto.cauchy.Error', null, global);
goog.exportSymbol('proto.cauchy.Event', null, global);
goog.exportSymbol('proto.cauchy.Job', null, global);
goog.exportSymbol('proto.cauchy.MiningResult', null, global);
goog.exportSymbol('proto.cauchy.MiningResult.Result', null, global);
goog.exportSymbol('proto.cauchy.StatusReply', null, global);
goog.exportSymbol('proto.cauchy.StatusReply.Miner', null, global);
goog.exportSymbol('proto.cauchy.StatusRequest', null, global);
goog.exportSymbol('proto.cauchy.SystemStatus', null, global);
goog.exportSymbol('proto.cauchy.SystemStatus.Miner', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cauchy.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cauchy.Event.oneofGroups_);
};
goog.inherits(proto.cauchy.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cauchy.Event.displayName = 'proto.cauchy.Event';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cauchy.Event.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.cauchy.Event.TypeCase = {
  TYPE_NOT_SET: 0,
  CONNECTION: 1,
  REPLY: 2,
  ERROR: 3,
  END: 4,
  EMPTY: 5,
  RESULT: 6,
  JOB: 7
};

/**
 * @return {proto.cauchy.Event.TypeCase}
 */
proto.cauchy.Event.prototype.getTypeCase = function() {
  return /** @type {proto.cauchy.Event.TypeCase} */(jspb.Message.computeOneofCase(this, proto.cauchy.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cauchy.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.cauchy.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cauchy.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    connection: (f = msg.getConnection()) && proto.cauchy.Connection.toObject(includeInstance, f),
    reply: (f = msg.getReply()) && proto.cauchy.StatusReply.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.cauchy.Error.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && proto.cauchy.End.toObject(includeInstance, f),
    empty: (f = msg.getEmpty()) && proto.cauchy.Empty.toObject(includeInstance, f),
    result: (f = msg.getResult()) && proto.cauchy.MiningResult.toObject(includeInstance, f),
    job: (f = msg.getJob()) && proto.cauchy.Job.toObject(includeInstance, f),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && proto.cauchy.SystemStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cauchy.Event}
 */
proto.cauchy.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cauchy.Event;
  return proto.cauchy.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cauchy.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cauchy.Event}
 */
proto.cauchy.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cauchy.Connection;
      reader.readMessage(value,proto.cauchy.Connection.deserializeBinaryFromReader);
      msg.setConnection(value);
      break;
    case 2:
      var value = new proto.cauchy.StatusReply;
      reader.readMessage(value,proto.cauchy.StatusReply.deserializeBinaryFromReader);
      msg.setReply(value);
      break;
    case 3:
      var value = new proto.cauchy.Error;
      reader.readMessage(value,proto.cauchy.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 4:
      var value = new proto.cauchy.End;
      reader.readMessage(value,proto.cauchy.End.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    case 5:
      var value = new proto.cauchy.Empty;
      reader.readMessage(value,proto.cauchy.Empty.deserializeBinaryFromReader);
      msg.setEmpty(value);
      break;
    case 6:
      var value = new proto.cauchy.MiningResult;
      reader.readMessage(value,proto.cauchy.MiningResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 7:
      var value = new proto.cauchy.Job;
      reader.readMessage(value,proto.cauchy.Job.deserializeBinaryFromReader);
      msg.setJob(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 9:
      var value = new proto.cauchy.SystemStatus;
      reader.readMessage(value,proto.cauchy.SystemStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cauchy.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cauchy.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cauchy.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cauchy.Connection.serializeBinaryToWriter
    );
  }
  f = message.getReply();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cauchy.StatusReply.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cauchy.Error.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cauchy.End.serializeBinaryToWriter
    );
  }
  f = message.getEmpty();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cauchy.Empty.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.cauchy.MiningResult.serializeBinaryToWriter
    );
  }
  f = message.getJob();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.cauchy.Job.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.cauchy.SystemStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional Connection connection = 1;
 * @return {?proto.cauchy.Connection}
 */
proto.cauchy.Event.prototype.getConnection = function() {
  return /** @type{?proto.cauchy.Connection} */ (
    jspb.Message.getWrapperField(this, proto.cauchy.Connection, 1));
};


/** @param {?proto.cauchy.Connection|undefined} value */
proto.cauchy.Event.prototype.setConnection = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.cauchy.Event.oneofGroups_[0], value);
};


proto.cauchy.Event.prototype.clearConnection = function() {
  this.setConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cauchy.Event.prototype.hasConnection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StatusReply reply = 2;
 * @return {?proto.cauchy.StatusReply}
 */
proto.cauchy.Event.prototype.getReply = function() {
  return /** @type{?proto.cauchy.StatusReply} */ (
    jspb.Message.getWrapperField(this, proto.cauchy.StatusReply, 2));
};


/** @param {?proto.cauchy.StatusReply|undefined} value */
proto.cauchy.Event.prototype.setReply = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.cauchy.Event.oneofGroups_[0], value);
};


proto.cauchy.Event.prototype.clearReply = function() {
  this.setReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cauchy.Event.prototype.hasReply = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Error error = 3;
 * @return {?proto.cauchy.Error}
 */
proto.cauchy.Event.prototype.getError = function() {
  return /** @type{?proto.cauchy.Error} */ (
    jspb.Message.getWrapperField(this, proto.cauchy.Error, 3));
};


/** @param {?proto.cauchy.Error|undefined} value */
proto.cauchy.Event.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.cauchy.Event.oneofGroups_[0], value);
};


proto.cauchy.Event.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cauchy.Event.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional End end = 4;
 * @return {?proto.cauchy.End}
 */
proto.cauchy.Event.prototype.getEnd = function() {
  return /** @type{?proto.cauchy.End} */ (
    jspb.Message.getWrapperField(this, proto.cauchy.End, 4));
};


/** @param {?proto.cauchy.End|undefined} value */
proto.cauchy.Event.prototype.setEnd = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.cauchy.Event.oneofGroups_[0], value);
};


proto.cauchy.Event.prototype.clearEnd = function() {
  this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cauchy.Event.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Empty empty = 5;
 * @return {?proto.cauchy.Empty}
 */
proto.cauchy.Event.prototype.getEmpty = function() {
  return /** @type{?proto.cauchy.Empty} */ (
    jspb.Message.getWrapperField(this, proto.cauchy.Empty, 5));
};


/** @param {?proto.cauchy.Empty|undefined} value */
proto.cauchy.Event.prototype.setEmpty = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.cauchy.Event.oneofGroups_[0], value);
};


proto.cauchy.Event.prototype.clearEmpty = function() {
  this.setEmpty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cauchy.Event.prototype.hasEmpty = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional MiningResult result = 6;
 * @return {?proto.cauchy.MiningResult}
 */
proto.cauchy.Event.prototype.getResult = function() {
  return /** @type{?proto.cauchy.MiningResult} */ (
    jspb.Message.getWrapperField(this, proto.cauchy.MiningResult, 6));
};


/** @param {?proto.cauchy.MiningResult|undefined} value */
proto.cauchy.Event.prototype.setResult = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.cauchy.Event.oneofGroups_[0], value);
};


proto.cauchy.Event.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cauchy.Event.prototype.hasResult = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Job job = 7;
 * @return {?proto.cauchy.Job}
 */
proto.cauchy.Event.prototype.getJob = function() {
  return /** @type{?proto.cauchy.Job} */ (
    jspb.Message.getWrapperField(this, proto.cauchy.Job, 7));
};


/** @param {?proto.cauchy.Job|undefined} value */
proto.cauchy.Event.prototype.setJob = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.cauchy.Event.oneofGroups_[0], value);
};


proto.cauchy.Event.prototype.clearJob = function() {
  this.setJob(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cauchy.Event.prototype.hasJob = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional google.protobuf.Timestamp timestamp = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.cauchy.Event.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.cauchy.Event.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.cauchy.Event.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cauchy.Event.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SystemStatus status = 9;
 * @return {?proto.cauchy.SystemStatus}
 */
proto.cauchy.Event.prototype.getStatus = function() {
  return /** @type{?proto.cauchy.SystemStatus} */ (
    jspb.Message.getWrapperField(this, proto.cauchy.SystemStatus, 9));
};


/** @param {?proto.cauchy.SystemStatus|undefined} value */
proto.cauchy.Event.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.cauchy.Event.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cauchy.Event.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cauchy.Connection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cauchy.Connection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cauchy.Connection.displayName = 'proto.cauchy.Connection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cauchy.Connection.prototype.toObject = function(opt_includeInstance) {
  return proto.cauchy.Connection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cauchy.Connection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.Connection.toObject = function(includeInstance, msg) {
  var f, obj = {
    pool: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cauchy.Connection}
 */
proto.cauchy.Connection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cauchy.Connection;
  return proto.cauchy.Connection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cauchy.Connection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cauchy.Connection}
 */
proto.cauchy.Connection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cauchy.Connection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cauchy.Connection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cauchy.Connection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.Connection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPool();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string pool = 1;
 * @return {string}
 */
proto.cauchy.Connection.prototype.getPool = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cauchy.Connection.prototype.setPool = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cauchy.MiningResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cauchy.MiningResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cauchy.MiningResult.displayName = 'proto.cauchy.MiningResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cauchy.MiningResult.prototype.toObject = function(opt_includeInstance) {
  return proto.cauchy.MiningResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cauchy.MiningResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.MiningResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cauchy.MiningResult}
 */
proto.cauchy.MiningResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cauchy.MiningResult;
  return proto.cauchy.MiningResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cauchy.MiningResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cauchy.MiningResult}
 */
proto.cauchy.MiningResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cauchy.MiningResult.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cauchy.MiningResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cauchy.MiningResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cauchy.MiningResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.MiningResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.cauchy.MiningResult.Result = {
  REJECTED: 0,
  ACCEPTED: 1,
  UNAUTHENTICATED: 3
};

/**
 * optional Result result = 1;
 * @return {!proto.cauchy.MiningResult.Result}
 */
proto.cauchy.MiningResult.prototype.getResult = function() {
  return /** @type {!proto.cauchy.MiningResult.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.cauchy.MiningResult.Result} value */
proto.cauchy.MiningResult.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cauchy.Job = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cauchy.Job, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cauchy.Job.displayName = 'proto.cauchy.Job';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cauchy.Job.prototype.toObject = function(opt_includeInstance) {
  return proto.cauchy.Job.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cauchy.Job} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.Job.toObject = function(includeInstance, msg) {
  var f, obj = {
    diff: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cauchy.Job}
 */
proto.cauchy.Job.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cauchy.Job;
  return proto.cauchy.Job.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cauchy.Job} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cauchy.Job}
 */
proto.cauchy.Job.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDiff(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cauchy.Job.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cauchy.Job.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cauchy.Job} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.Job.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiff();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 diff = 1;
 * @return {number}
 */
proto.cauchy.Job.prototype.getDiff = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.cauchy.Job.prototype.setDiff = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cauchy.DifficultyChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cauchy.DifficultyChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cauchy.DifficultyChange.displayName = 'proto.cauchy.DifficultyChange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cauchy.DifficultyChange.prototype.toObject = function(opt_includeInstance) {
  return proto.cauchy.DifficultyChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cauchy.DifficultyChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.DifficultyChange.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cauchy.DifficultyChange}
 */
proto.cauchy.DifficultyChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cauchy.DifficultyChange;
  return proto.cauchy.DifficultyChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cauchy.DifficultyChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cauchy.DifficultyChange}
 */
proto.cauchy.DifficultyChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cauchy.DifficultyChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cauchy.DifficultyChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cauchy.DifficultyChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.DifficultyChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cauchy.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cauchy.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cauchy.Error.displayName = 'proto.cauchy.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cauchy.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.cauchy.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cauchy.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cauchy.Error}
 */
proto.cauchy.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cauchy.Error;
  return proto.cauchy.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cauchy.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cauchy.Error}
 */
proto.cauchy.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cauchy.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cauchy.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cauchy.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.cauchy.Error.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cauchy.Error.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cauchy.End = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cauchy.End, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cauchy.End.displayName = 'proto.cauchy.End';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cauchy.End.prototype.toObject = function(opt_includeInstance) {
  return proto.cauchy.End.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cauchy.End} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.End.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cauchy.End}
 */
proto.cauchy.End.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cauchy.End;
  return proto.cauchy.End.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cauchy.End} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cauchy.End}
 */
proto.cauchy.End.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cauchy.End.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cauchy.End.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cauchy.End} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.End.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.cauchy.End.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cauchy.End.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cauchy.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cauchy.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cauchy.Empty.displayName = 'proto.cauchy.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cauchy.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.cauchy.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cauchy.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cauchy.Empty}
 */
proto.cauchy.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cauchy.Empty;
  return proto.cauchy.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cauchy.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cauchy.Empty}
 */
proto.cauchy.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cauchy.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cauchy.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cauchy.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.cauchy.Empty.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cauchy.Empty.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cauchy.StatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cauchy.StatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cauchy.StatusRequest.displayName = 'proto.cauchy.StatusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cauchy.StatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cauchy.StatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cauchy.StatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.StatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cauchy.StatusRequest}
 */
proto.cauchy.StatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cauchy.StatusRequest;
  return proto.cauchy.StatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cauchy.StatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cauchy.StatusRequest}
 */
proto.cauchy.StatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cauchy.StatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cauchy.StatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cauchy.StatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.StatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.cauchy.StatusRequest.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.cauchy.StatusRequest.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cauchy.StatusReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cauchy.StatusReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cauchy.StatusReply.displayName = 'proto.cauchy.StatusReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cauchy.StatusReply.prototype.toObject = function(opt_includeInstance) {
  return proto.cauchy.StatusReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cauchy.StatusReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.StatusReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    miner: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stats: (f = msg.getStats()) && xmr_pb.Statistics.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cauchy.StatusReply}
 */
proto.cauchy.StatusReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cauchy.StatusReply;
  return proto.cauchy.StatusReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cauchy.StatusReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cauchy.StatusReply}
 */
proto.cauchy.StatusReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cauchy.StatusReply.Miner} */ (reader.readEnum());
      msg.setMiner(value);
      break;
    case 2:
      var value = new xmr_pb.Statistics;
      reader.readMessage(value,xmr_pb.Statistics.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cauchy.StatusReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cauchy.StatusReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cauchy.StatusReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.StatusReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMiner();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      xmr_pb.Statistics.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.cauchy.StatusReply.Miner = {
  XMR_CPU: 0,
  XMR_CUDA: 1,
  XMR_AMD: 2,
  ETH: 3
};

/**
 * optional Miner miner = 1;
 * @return {!proto.cauchy.StatusReply.Miner}
 */
proto.cauchy.StatusReply.prototype.getMiner = function() {
  return /** @type {!proto.cauchy.StatusReply.Miner} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.cauchy.StatusReply.Miner} value */
proto.cauchy.StatusReply.prototype.setMiner = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Statistics stats = 2;
 * @return {?proto.cauchy.Statistics}
 */
proto.cauchy.StatusReply.prototype.getStats = function() {
  return /** @type{?proto.cauchy.Statistics} */ (
    jspb.Message.getWrapperField(this, xmr_pb.Statistics, 2));
};


/** @param {?proto.cauchy.Statistics|undefined} value */
proto.cauchy.StatusReply.prototype.setStats = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.cauchy.StatusReply.prototype.clearStats = function() {
  this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cauchy.StatusReply.prototype.hasStats = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cauchy.SystemStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cauchy.SystemStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cauchy.SystemStatus.displayName = 'proto.cauchy.SystemStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cauchy.SystemStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.cauchy.SystemStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cauchy.SystemStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.SystemStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    running: jspb.Message.getFieldWithDefault(msg, 1, false),
    miner: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cauchy.SystemStatus}
 */
proto.cauchy.SystemStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cauchy.SystemStatus;
  return proto.cauchy.SystemStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cauchy.SystemStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cauchy.SystemStatus}
 */
proto.cauchy.SystemStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRunning(value);
      break;
    case 2:
      var value = /** @type {!proto.cauchy.SystemStatus.Miner} */ (reader.readEnum());
      msg.setMiner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cauchy.SystemStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cauchy.SystemStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cauchy.SystemStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cauchy.SystemStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRunning();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMiner();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.cauchy.SystemStatus.Miner = {
  XMR_CPU: 0,
  XMR_CUDA: 1,
  XMR_AMD: 2,
  ETH_CPU: 3,
  ETH_CUDA: 4
};

/**
 * optional bool running = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.cauchy.SystemStatus.prototype.getRunning = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.cauchy.SystemStatus.prototype.setRunning = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Miner miner = 2;
 * @return {!proto.cauchy.SystemStatus.Miner}
 */
proto.cauchy.SystemStatus.prototype.getMiner = function() {
  return /** @type {!proto.cauchy.SystemStatus.Miner} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.cauchy.SystemStatus.Miner} value */
proto.cauchy.SystemStatus.prototype.setMiner = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.cauchy);
