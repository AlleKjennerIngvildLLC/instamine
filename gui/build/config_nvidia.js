'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _reduxSaga = require('redux-saga');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function buildConfiguration(gpu_threads_conf, walletAddress) {
  gpu_threads_conf = (0, _stringify2.default)(gpu_threads_conf);

  var config = '\n/*\n * GPU configuration. You should play around with threads and blocks as the fastest settings will vary.\n * index         - GPU index number usually starts from 0.\n * threads       - Number of GPU threads (nothing to do with CPU threads).\n * blocks        - Number of GPU blocks (nothing to do with CPU threads).\n * bfactor       - Enables running the Cryptonight kernel in smaller pieces.\n *                 Increase if you want to reduce GPU lag. Recommended setting on GUI systems - 8\n * bsleep        - Insert a delay of X microseconds between kernel launches.\n *                 Increase if you want to reduce GPU lag. Recommended setting on GUI systems - 100\n * affine_to_cpu - This will affine the thread to a CPU. This can make a GPU miner play along nicer with a CPU miner.\n *\n * On the first run the miner will look at your system and suggest a basic configuration that will work,\n * you can try to tweak it from there to get the best performance.\n * \n * A filled out configuration should look like this:\n * "gpu_threads_conf" : \n * [\n *     { "index" : 0, "threads" : 17, "blocks" : 60, "bfactor" : 0, "bsleep" :  0, "affine_to_cpu" : false},\n * ],\n */\n"gpu_threads_conf" : ' + gpu_threads_conf + ',\n\n/*\n * TLS Settings\n * If you need real security, make sure tls_secure_algo is enabled (otherwise MITM attack can downgrade encryption\n * to trivially breakable stuff like DES and MD5), and verify the server\'s fingerprint through a trusted channel. \n *\n * use_tls         - This option will make us connect using Transport Layer Security.\n * tls_secure_algo - Use only secure algorithms. This will make us quit with an error if we can\'t negotiate a secure algo.\n * tls_fingerprint - Server\'s SHA256 fingerprint. If this string is non-empty then we will check the server\'s cert against it.\n */\n"use_tls" : false,\n"tls_secure_algo" : true,\n"tls_fingerprint" : "",\n\n/*\n * pool_address\t  - Pool address should be in the form "pool.supportxmr.com:3333". Only stratum pools are supported.\n * wallet_address - Your wallet, or pool login.\n * pool_password  - Can be empty in most cases or "x".\n */\n"pool_address" : "pool.usxmrpool.com:3333",\n"wallet_address" : "' + walletAddress + '",\n"pool_password" : "",\n\n/*\n * Network timeouts.\n * Because of the way this client is written it doesn\'t need to constantly talk (keep-alive) to the server to make \n * sure it is there. We detect a buggy / overloaded server by the call timeout. The default values will be ok for \n * nearly all cases. If they aren\'t the pool has most likely overload issues. Low call timeout values are preferable -\n * long timeouts mean that we waste hashes on potentially stale jobs. Connection report will tell you how long the\n * server usually takes to process our calls.\n *\n * call_timeout - How long should we wait for a response from the server before we assume it is dead and drop the connection.\n * retry_time\t- How long should we wait before another connection attempt.\n *                Both values are in seconds.\n * giveup_limit - Limit how many times we try to reconnect to the pool. Zero means no limit. Note that stak miners\n *                don\'t mine while the connection is lost, so your computer\'s power usage goes down to idle.\n */\n"call_timeout" : 10,\n"retry_time" : 10,\n"giveup_limit" : 0,\n\n/*\n * Output control.\n * Since most people are used to miners printing all the time, that\'s what we do by default too. This is suboptimal\n * really, since you cannot see errors under pages and pages of text and performance stats. Given that we have internal\n * performance monitors, there is very little reason to spew out pages of text instead of concise reports.\n * Press \'h\' (hashrate), \'r\' (results) or \'c\' (connection) to print reports.\n *\n * verbose_level - 0 - Don\'t print anything. \n *                 1 - Print intro, connection event, disconnect event\n *                 2 - All of level 1, and new job (block) event if the difficulty is different from the last job\n *                 3 - All of level 1, and new job (block) event in all cases, result submission event.\n *                 4 - All of level 3, and automatic hashrate report printing \n */\n"verbose_level" : 3,\n\n/*\n * Automatic hashrate report\n *\n * h_print_time - How often, in seconds, should we print a hashrate report if verbose_level is set to 4.\n *                This option has no effect if verbose_level is not 4.\n */\n"h_print_time" : 60,\n\n/*\n * Output file\n *\n * output_file  - This option will log all output to a file.\n *\n */\n"output_file" : "",\n\n/*\n * Built-in web server\n * I like checking my hashrate on my phone. Don\'t you?\n * Keep in mind that you will need to set up port forwarding on your router if you want to access it from\n * outside of your home network. Ports lower than 1024 on Linux systems will require root.\n *\n * httpd_port - Port we should listen on. Default, 0, will switch off the server.\n */\n"httpd_port" : 0,\n\n/*\n * prefer_ipv4 - IPv6 preference. If the host is available on both IPv4 and IPv6 net, which one should be choose?\n *               This setting will only be needed in 2020\'s. No need to worry about it now.\n */\n"prefer_ipv4" : true,\n"daemon_mode": false\n';

  return config;
}

exports.default = buildConfiguration;