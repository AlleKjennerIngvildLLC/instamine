{"version":3,"sources":["../../app/reducers/miner.js"],"names":["require","Event","state","action","isStarting","status","running","updateSettings","settings","payload","systemStatus","SUCCEEDED","console","log","toObject","getRunning","x","stop","START","event","stateUpdate","getTimestamp","undefined","getTypeCase","TypeCase","eventHistory","config","walletAddress","enableGPU","nThreads","hashrates"],"mappings":"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","file":"miner.js","sourcesContent":["import { handleActions } from 'redux-actions';\r\nimport actions from '../actions/miner';\r\n\r\n\r\nimport handleReply from './reply';\r\nimport on_connect from './connected';\r\n\r\nconst { Event } = require('../rpc/messages_pb');\r\n\r\n\r\nexport default handleActions({\r\n\r\n  'START_MINER_START': (state, action) => {\r\n    return { ...state, isStarting: true };\r\n  },\r\n\r\n\r\n  'START_MINER_SUCCEEDED': (state, action) => {\r\n    return { ...state, isStarting: false, status: { running: true } };\r\n  },\r\n\r\n\r\n  'START_MINER_FAILED': (state, action) => {\r\n    return { ...state, isStarting: false };\r\n  },\r\n\r\n\r\n  'START_MINER_END': (state, action) => {\r\n    return { ...state, isStarting: false };\r\n  },\r\n\r\n\r\n  [actions.updateSettings]: (state, action) => {\r\n\r\n    return { ...state, settings: action.payload };\r\n  },\r\n\r\n  [actions.systemStatus.SUCCEEDED]: (state, action) => {\r\n\r\n    console.log(action.payload.toObject())\r\n    let running = action.payload.getRunning()\r\n    return { ...state, status: { running: running } }\r\n    x;\r\n  },\r\n\r\n  [actions.stop.START]: (state, action) => {\r\n    return { ...state };\r\n  },\r\n\r\n  [actions.stop.SUCCEEDED]: (state, action) => {\r\n\r\n    return { ...state, isStarting: false, status: { running: false } };\r\n  },\r\n\r\n\r\n  'FETCH_STATUS_START': (state, action) => {\r\n    console.log(`handling miner fetch action!`);\r\n    return { ...state };\r\n  },\r\n\r\n\r\n  'FETCH_STATUS_SUCCEEDED': (state, action) => {\r\n\r\n    let event = action.payload;\r\n    let stateUpdate = {};\r\n\r\n    if (event.getTimestamp() !== undefined) {\r\n\r\n      switch (event.getTypeCase()) {\r\n\r\n        case Event.TypeCase['CONNECTION']:\r\n          stateUpdate = {\r\n            ...stateUpdate,\r\n            ...on_connect(event, state),\r\n          };\r\n\r\n          break;\r\n\r\n        case Event.TypeCase['REPLY']:\r\n\r\n          stateUpdate = {\r\n            ...stateUpdate,\r\n            ...handleReply(event, state),\r\n          };\r\n\r\n          break;\r\n\r\n        case Event.TypeCase['ERROR']:\r\n          break;\r\n\r\n        case Event.TypeCase['END']:\r\n          break;\r\n\r\n        case Event.TypeCase['EMPTY']:\r\n\r\n          console.log('empty');\r\n          break;\r\n\r\n        case Event.TypeCase['RESULT']:\r\n          console.log('on_result');\r\n          break;\r\n\r\n        case Event.TypeCase['JOB']:\r\n          console.log('on_job');\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n\r\n      stateUpdate = {\r\n        ...stateUpdate,\r\n        eventHistory: [...state.eventHistory, event.toObject()]\r\n      };\r\n\r\n\r\n\r\n      // for(var e of stateUpdate.eventHistory) {\r\n      //   console.log(e.toObject());\r\n      // }\r\n\r\n    }\r\n    return { ...state, ...stateUpdate };\r\n  },\r\n}, {\r\n    status: { running: false }, isStarting: false,\r\n    settings: { config: '', walletAddress: '', enableGPU: false, nThreads: 1 },\r\n    running: false,\r\n    eventHistory: [],\r\n    hashrates: []\r\n  });"]}