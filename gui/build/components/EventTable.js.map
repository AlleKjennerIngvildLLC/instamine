{"version":3,"sources":["../../app/components/EventTable.js"],"names":["EventTable","props","transform","i","event","types","eventType","type","undefined","toUpperCase","date","Date","timestamp","seconds","nanos","id","events","map","columns","Header","accessor","d","toString","color","background"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;;;IAIqBA,U;;;AAEjB,wBAAYC,KAAZ,EAAmB;AAAA;AAAA,6IACTA,KADS;AAElB;;;;iCAEQ;AACL,qBAASC,SAAT,CAAmBC,CAAnB,EAAsBC,KAAtB,EAA6B;AACzB,oBAAIC,QAAQ,CAAC,YAAD,EAAe,OAAf,EAAwB,OAAxB,EAAiC,KAAjC,EAAwC,OAAxC,EAAiD,QAAjD,EAA2D,KAA3D,CAAZ;;AAEA,oBAAIC,SAAJ;AAHyB;AAAA;AAAA;;AAAA;AAIzB,oEAAiBD,KAAjB,4GAAwB;AAAA,4BAAfE,IAAe;;AACpB,4BAAIH,MAAMG,IAAN,MAAgBC,SAApB,EAA+B;AAC3BF,wCAAYC,KAAKE,WAAL,EAAZ;AACA;AACH;AACJ;AATwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWzB,oBAAIC,OAAO,IAAIC,IAAJ,CACPP,MAAMQ,SAAN,CAAgBC,OAAhB,GAA0B,IAA1B,GACET,MAAMQ,SAAN,CAAgBE,KAAhB,GAAwB,IAFnB,CAAX;;AAKA,uBAAO,EAAEC,IAAIZ,CAAN,EAASI,MAAMA,IAAf,EAAqBG,MAAMA,IAA3B,EAAP;AACH;;AAED,gBAAIM,SAAS,KAAKf,KAAL,CAAWe,MAAX,CAAkBC,GAAlB,CAAsB,UAACd,CAAD,EAAIC,KAAJ,EAAc;AAC7C,uBAAOF,UAAUE,KAAV,EAAiBD,CAAjB,CAAP;AACH,aAFY,CAAb;;AAIA,gBAAMe,UAAU,CAAC;AACbC,wBAAQ,YADK;AAEbC,0BAAU;;AAEV;AAJa,aAAD,EAKb;AACCD,wBAAQ,MADT;AAECJ,oBAAI,MAFL;AAGCK,0BAAU,kBAACC,CAAD,EAAO;AACb,2BAAOA,EAAEX,IAAF,CAAOY,QAAP,EAAP;AACH;;AAED;AAPD,aALa,CAAhB;;AAeA,mBAGI;AACI,uBAAO;AACHC,2BAAO,OADJ;AAEHC,gCAAY;;AAFT,iBADX;AAMI,iCAAiB,CANrB;AAOI,qCAAqB,KAPzB;AAQI,8BAAc,KARlB;AASI,0BAAU,IATd;AAUI,2BAAW,IAVf;AAWI,4BAAY,KAXhB;AAYI,2BAAU,qBAZd;AAaI,sBAAMR,MAbV;AAcI,yBAASE;AAdb,cAHJ;AAqBH;;;;;kBAlEgBlB,U;AAmEpB","file":"EventTable.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactTable from 'react-table'\r\n\r\nimport _ from 'lodash';\r\n\r\n\r\n\r\nexport default class EventTable extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        function transform(i, event) {\r\n            let types = [\"connection\", \"reply\", \"error\", \"end\", \"empty\", \"result\", \"job\"];\r\n\r\n            var eventType;\r\n            for (var type of types) {\r\n                if (event[type] !== undefined) {\r\n                    eventType = type.toUpperCase();\r\n                    break;\r\n                }\r\n            }\r\n\r\n            let date = new Date(\r\n                event.timestamp.seconds * 1000\r\n                + event.timestamp.nanos / 1000\r\n            );\r\n\r\n            return { id: i, type: type, date: date };\r\n        }\r\n\r\n        let events = this.props.events.map((i, event) => {\r\n            return transform(event, i);\r\n        });\r\n\r\n        const columns = [{\r\n            Header: 'Event type',\r\n            accessor: 'type',\r\n            \r\n            // maxWidth: 200,\r\n        }, {\r\n            Header: 'Date',\r\n            id: 'date',\r\n            accessor: (d) => {\r\n                return d.date.toString();\r\n            }\r\n            \r\n            // maxWidth: 200,\r\n        }];\r\n\r\n        return (\r\n\r\n\r\n            <ReactTable\r\n                style={{\r\n                    color: 'black',\r\n                    background: 'white',\r\n                    \r\n                }}\r\n                defaultPageSize={9}\r\n                showPageSizeOptions={false}\r\n                showPageJump={false}\r\n                sortable={true}\r\n                resizable={true}\r\n                filterable={false}\r\n                className=\"-striped -highlight\"\r\n                data={events}\r\n                columns={columns}\r\n            />\r\n\r\n        );\r\n    }\r\n};"]}