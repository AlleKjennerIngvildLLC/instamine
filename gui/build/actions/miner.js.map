{"version":3,"sources":["../../app/actions/miner.js"],"names":["requestResponse","minerSaga","require","Event","client","handle","send_notification","dispatch","title","message","options","position","autoDismiss","info","startMiner","config","startRequest","startSuccess","startFailure","startEnded","response","getMessage","date","Date","toLocaleString","console","log","undefined","setInterval","type","stopMiner","clearInterval","requestStatus","getMiningStatus","event","toObject","getTypeCase","TypeCase","requestSystemStatus","getSystemStatus","updateSettings","value","action","start","stop","status","systemStatus"],"mappings":"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","file":"miner.js","sourcesContent":["import {createAction} from 'redux-actions';\r\nimport {createActionThunk} from 'redux-thunk-actions';\r\nimport Notifications from 'react-notification-system-redux';\r\nimport {call, put, takeLatest} from 'redux-saga/effects';\r\n\r\nimport MinerClient from '../miner';\r\nconst { Event } = require('../rpc/messages_pb');\r\n\r\n\r\n// The connection should be triggered by an action!\r\nlet client = new MinerClient();\r\nlet handle;\r\n\r\n\r\nfunction send_notification(dispatch, title, message) {\r\n  \r\n    const options = {\r\n      title: title,\r\n      message: message,\r\n      position: 'br',\r\n      autoDismiss: 3\r\n    };\r\n  \r\n    dispatch(Notifications.info(options));\r\n  }\r\n  \r\n\r\n\r\nconst startMiner = (config) => async(dispatch) => {\r\n\r\n  \r\n  const startRequest = createAction('START_MINER_START');\r\n  const startSuccess = createAction('START_MINER_SUCCEEDED');\r\n  const startFailure = createAction('START_MINER_FAILED');\r\n  const startEnded = createAction('START_MINER_ENDED');\r\n\r\n  dispatch(startRequest());\r\n\r\n  try {\r\n    var response = await client.startMiner(config);\r\n\r\n    if (response.getMessage() == 'Server started') {\r\n\r\n      let date = new Date().toLocaleString();\r\n\r\n\r\n      send_notification(\r\n        dispatch, 'Miner started.', `Started mining XMR [${date}]`);\r\n\r\n      dispatch(startSuccess());\r\n\r\n      console.log(handle);\r\n      if (handle === undefined) {\r\n        handle = setInterval(() => dispatch({type: 'START_STATUS_REQUEST_SAGA'}), 5000);\r\n      } else {\r\n        console.log('handle is not undefined. should not be possible!');\r\n      }\r\n    }\r\n  } catch (e) {\r\n\r\n    console.log(e);\r\n    dispatch(startFailure(e));\r\n  }\r\n\r\n  dispatch(startEnded());\r\n};\r\n\r\nconst stopMiner = createActionThunk('STOP_MINER', async () => {\r\n  var response = await client.stopMiner();\r\n\r\n  if (handle !== undefined) {\r\n    clearInterval(handle);\r\n    handle = undefined;\r\n  }\r\n\r\n  return response;\r\n});\r\n\r\nconst requestStatus = () => async(dispatch) => {\r\n\r\n  const startRequest = createAction('FETCH_STATUS_START');\r\n  const startSuccess = createAction('FETCH_STATUS_SUCCEEDED');\r\n  const startFailure = createAction('FETCH_STATUS_FAILED');\r\n  const startEnded = createAction('FETCH_STATUS_ENDED');\r\n\r\n  dispatch(startRequest());\r\n  \r\n  try {\r\n    \r\n    let event = await client.getMiningStatus();\r\n\r\n    console.log(event.toObject());\r\n\r\n    dispatch(startSuccess(event));\r\n\r\n    switch (event.getTypeCase()) {\r\n      \r\n      case Event.TypeCase['CONNECTION']:\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  catch (e) {\r\n    dispatch(startFailure(e));\r\n  }\r\n};\r\n\r\n\r\nconst requestSystemStatus = createActionThunk('FETCH_SYSTEM_STATUS', async() => {\r\n  let response = await client.getSystemStatus();\r\n  return response;\r\n});\r\n\r\nconst updateSettings = createAction('UPDATE_SETTINGS', (value) => {\r\n  return value;\r\n});\r\n\r\nfunction* requestResponse(action) {\r\n  try {\r\n    yield put(requestStatus());\r\n    yield put({type: 'START_STATUS_REQUEST_SAGA_SUCCEEDED'});\r\n  } catch (e) {\r\n    yield put({type: 'START_STATUS_REQUEST_SAGA_FAILED', message: e.message});\r\n  }\r\n\r\n}\r\n\r\nfunction* minerSaga() {\r\n  yield takeLatest('START_STATUS_REQUEST_SAGA', requestResponse);\r\n}\r\n\r\nexport default {\r\n  start : startMiner,\r\n  stop : stopMiner,\r\n  status : requestStatus,\r\n  systemStatus : requestSystemStatus,\r\n  updateSettings : updateSettings,\r\n  minerSaga : minerSaga\r\n};\r\n"]}