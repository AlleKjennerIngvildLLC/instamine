// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xmr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "xmr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cauchy {
class StatisticsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Statistics> {
} _Statistics_default_instance_;
class ResultReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResultReport> {
} _ResultReport_default_instance_;
class HashrateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Hashrate> {
} _Hashrate_default_instance_;

namespace protobuf_xmr_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, pool_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, connection_est_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, error_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, ping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, n_threads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, hashrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, connected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, running_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, logged_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, report_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultReport, diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultReport, good_results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultReport, total_results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultReport, average_result_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultReport, ratio_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hashrate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hashrate, hashrate_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Statistics)},
  { 15, -1, sizeof(ResultReport)},
  { 25, -1, sizeof(Hashrate)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Statistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResultReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Hashrate_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "xmr.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _Statistics_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ResultReport_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Hashrate_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Statistics_default_instance_.DefaultConstruct();
  _ResultReport_default_instance_.DefaultConstruct();
  _Hashrate_default_instance_.DefaultConstruct();
  _Statistics_default_instance_.get_mutable()->report_ = const_cast< ::cauchy::ResultReport*>(
      ::cauchy::ResultReport::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\txmr.proto\022\006cauchy\"\357\001\n\nStatistics\022\024\n\014po"
      "ol_address\030\001 \001(\t\022\026\n\016connection_est\030\002 \001(\t"
      "\022\021\n\terror_log\030\003 \001(\t\022\014\n\004ping\030\004 \001(\r\022\021\n\tn_t"
      "hreads\030\005 \001(\r\022\"\n\010hashrate\030\006 \003(\0132\020.cauchy."
      "Hashrate\022\021\n\tconnected\030\007 \001(\010\022\017\n\007running\030\010"
      " \001(\010\022\021\n\tlogged_in\030\t \001(\010\022$\n\006report\030\n \001(\0132"
      "\024.cauchy.ResultReport\"u\n\014ResultReport\022\014\n"
      "\004diff\030\001 \001(\004\022\024\n\014good_results\030\002 \001(\004\022\025\n\rtot"
      "al_results\030\003 \001(\004\022\033\n\023average_result_time\030"
      "\004 \001(\001\022\r\n\005ratio\030\005 \001(\001\"\034\n\010Hashrate\022\020\n\010hash"
      "rate\030\001 \001(\001B\024\n\014cauchy.miner\242\002\003CHYb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 440);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "xmr.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_xmr_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Statistics::kPoolAddressFieldNumber;
const int Statistics::kConnectionEstFieldNumber;
const int Statistics::kErrorLogFieldNumber;
const int Statistics::kPingFieldNumber;
const int Statistics::kNThreadsFieldNumber;
const int Statistics::kHashrateFieldNumber;
const int Statistics::kConnectedFieldNumber;
const int Statistics::kRunningFieldNumber;
const int Statistics::kLoggedInFieldNumber;
const int Statistics::kReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Statistics::Statistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_xmr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.Statistics)
}
Statistics::Statistics(const Statistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hashrate_(from.hashrate_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pool_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pool_address().size() > 0) {
    pool_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pool_address_);
  }
  connection_est_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.connection_est().size() > 0) {
    connection_est_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_est_);
  }
  error_log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_log().size() > 0) {
    error_log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_log_);
  }
  if (from.has_report()) {
    report_ = new ::cauchy::ResultReport(*from.report_);
  } else {
    report_ = NULL;
  }
  ::memcpy(&ping_, &from.ping_,
    reinterpret_cast<char*>(&logged_in_) -
    reinterpret_cast<char*>(&ping_) + sizeof(logged_in_));
  // @@protoc_insertion_point(copy_constructor:cauchy.Statistics)
}

void Statistics::SharedCtor() {
  pool_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_est_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&report_, 0, reinterpret_cast<char*>(&logged_in_) -
    reinterpret_cast<char*>(&report_) + sizeof(logged_in_));
  _cached_size_ = 0;
}

Statistics::~Statistics() {
  // @@protoc_insertion_point(destructor:cauchy.Statistics)
  SharedDtor();
}

void Statistics::SharedDtor() {
  pool_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_est_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete report_;
  }
}

void Statistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Statistics::descriptor() {
  protobuf_xmr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xmr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Statistics& Statistics::default_instance() {
  protobuf_xmr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Statistics* Statistics::New(::google::protobuf::Arena* arena) const {
  Statistics* n = new Statistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.Statistics)
  hashrate_.Clear();
  pool_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_est_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && report_ != NULL) {
    delete report_;
  }
  report_ = NULL;
  ::memset(&ping_, 0, reinterpret_cast<char*>(&logged_in_) -
    reinterpret_cast<char*>(&ping_) + sizeof(logged_in_));
}

bool Statistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.Statistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pool_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pool_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pool_address().data(), this->pool_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cauchy.Statistics.pool_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string connection_est = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_est()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connection_est().data(), this->connection_est().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cauchy.Statistics.connection_est"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_log = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_log().data(), this->error_log().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cauchy.Statistics.error_log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ping = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n_threads = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cauchy.Hashrate hashrate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hashrate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool connected = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool running = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool logged_in = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &logged_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cauchy.ResultReport report = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.Statistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.Statistics)
  return false;
#undef DO_
}

void Statistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.Statistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pool_address = 1;
  if (this->pool_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pool_address().data(), this->pool_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.Statistics.pool_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pool_address(), output);
  }

  // string connection_est = 2;
  if (this->connection_est().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connection_est().data(), this->connection_est().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.Statistics.connection_est");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->connection_est(), output);
  }

  // string error_log = 3;
  if (this->error_log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_log().data(), this->error_log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.Statistics.error_log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_log(), output);
  }

  // uint32 ping = 4;
  if (this->ping() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ping(), output);
  }

  // uint32 n_threads = 5;
  if (this->n_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->n_threads(), output);
  }

  // repeated .cauchy.Hashrate hashrate = 6;
  for (unsigned int i = 0, n = this->hashrate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->hashrate(i), output);
  }

  // bool connected = 7;
  if (this->connected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->connected(), output);
  }

  // bool running = 8;
  if (this->running() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->running(), output);
  }

  // bool logged_in = 9;
  if (this->logged_in() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->logged_in(), output);
  }

  // .cauchy.ResultReport report = 10;
  if (this->has_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->report_, output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.Statistics)
}

::google::protobuf::uint8* Statistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.Statistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pool_address = 1;
  if (this->pool_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pool_address().data(), this->pool_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.Statistics.pool_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pool_address(), target);
  }

  // string connection_est = 2;
  if (this->connection_est().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connection_est().data(), this->connection_est().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.Statistics.connection_est");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->connection_est(), target);
  }

  // string error_log = 3;
  if (this->error_log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_log().data(), this->error_log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.Statistics.error_log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_log(), target);
  }

  // uint32 ping = 4;
  if (this->ping() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ping(), target);
  }

  // uint32 n_threads = 5;
  if (this->n_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->n_threads(), target);
  }

  // repeated .cauchy.Hashrate hashrate = 6;
  for (unsigned int i = 0, n = this->hashrate_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->hashrate(i), deterministic, target);
  }

  // bool connected = 7;
  if (this->connected() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->connected(), target);
  }

  // bool running = 8;
  if (this->running() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->running(), target);
  }

  // bool logged_in = 9;
  if (this->logged_in() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->logged_in(), target);
  }

  // .cauchy.ResultReport report = 10;
  if (this->has_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->report_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.Statistics)
  return target;
}

size_t Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.Statistics)
  size_t total_size = 0;

  // repeated .cauchy.Hashrate hashrate = 6;
  {
    unsigned int count = this->hashrate_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hashrate(i));
    }
  }

  // string pool_address = 1;
  if (this->pool_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pool_address());
  }

  // string connection_est = 2;
  if (this->connection_est().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connection_est());
  }

  // string error_log = 3;
  if (this->error_log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_log());
  }

  // .cauchy.ResultReport report = 10;
  if (this->has_report()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->report_);
  }

  // uint32 ping = 4;
  if (this->ping() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ping());
  }

  // uint32 n_threads = 5;
  if (this->n_threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n_threads());
  }

  // bool connected = 7;
  if (this->connected() != 0) {
    total_size += 1 + 1;
  }

  // bool running = 8;
  if (this->running() != 0) {
    total_size += 1 + 1;
  }

  // bool logged_in = 9;
  if (this->logged_in() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Statistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  const Statistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Statistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.Statistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.Statistics)
    MergeFrom(*source);
  }
}

void Statistics::MergeFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashrate_.MergeFrom(from.hashrate_);
  if (from.pool_address().size() > 0) {

    pool_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pool_address_);
  }
  if (from.connection_est().size() > 0) {

    connection_est_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_est_);
  }
  if (from.error_log().size() > 0) {

    error_log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_log_);
  }
  if (from.has_report()) {
    mutable_report()->::cauchy::ResultReport::MergeFrom(from.report());
  }
  if (from.ping() != 0) {
    set_ping(from.ping());
  }
  if (from.n_threads() != 0) {
    set_n_threads(from.n_threads());
  }
  if (from.connected() != 0) {
    set_connected(from.connected());
  }
  if (from.running() != 0) {
    set_running(from.running());
  }
  if (from.logged_in() != 0) {
    set_logged_in(from.logged_in());
  }
}

void Statistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statistics::CopyFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistics::IsInitialized() const {
  return true;
}

void Statistics::Swap(Statistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Statistics::InternalSwap(Statistics* other) {
  hashrate_.InternalSwap(&other->hashrate_);
  pool_address_.Swap(&other->pool_address_);
  connection_est_.Swap(&other->connection_est_);
  error_log_.Swap(&other->error_log_);
  std::swap(report_, other->report_);
  std::swap(ping_, other->ping_);
  std::swap(n_threads_, other->n_threads_);
  std::swap(connected_, other->connected_);
  std::swap(running_, other->running_);
  std::swap(logged_in_, other->logged_in_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Statistics::GetMetadata() const {
  protobuf_xmr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xmr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Statistics

// string pool_address = 1;
void Statistics::clear_pool_address() {
  pool_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Statistics::pool_address() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.pool_address)
  return pool_address_.GetNoArena();
}
void Statistics::set_pool_address(const ::std::string& value) {
  
  pool_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cauchy.Statistics.pool_address)
}
#if LANG_CXX11
void Statistics::set_pool_address(::std::string&& value) {
  
  pool_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cauchy.Statistics.pool_address)
}
#endif
void Statistics::set_pool_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pool_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cauchy.Statistics.pool_address)
}
void Statistics::set_pool_address(const char* value, size_t size) {
  
  pool_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cauchy.Statistics.pool_address)
}
::std::string* Statistics::mutable_pool_address() {
  
  // @@protoc_insertion_point(field_mutable:cauchy.Statistics.pool_address)
  return pool_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Statistics::release_pool_address() {
  // @@protoc_insertion_point(field_release:cauchy.Statistics.pool_address)
  
  return pool_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Statistics::set_allocated_pool_address(::std::string* pool_address) {
  if (pool_address != NULL) {
    
  } else {
    
  }
  pool_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pool_address);
  // @@protoc_insertion_point(field_set_allocated:cauchy.Statistics.pool_address)
}

// string connection_est = 2;
void Statistics::clear_connection_est() {
  connection_est_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Statistics::connection_est() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.connection_est)
  return connection_est_.GetNoArena();
}
void Statistics::set_connection_est(const ::std::string& value) {
  
  connection_est_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cauchy.Statistics.connection_est)
}
#if LANG_CXX11
void Statistics::set_connection_est(::std::string&& value) {
  
  connection_est_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cauchy.Statistics.connection_est)
}
#endif
void Statistics::set_connection_est(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connection_est_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cauchy.Statistics.connection_est)
}
void Statistics::set_connection_est(const char* value, size_t size) {
  
  connection_est_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cauchy.Statistics.connection_est)
}
::std::string* Statistics::mutable_connection_est() {
  
  // @@protoc_insertion_point(field_mutable:cauchy.Statistics.connection_est)
  return connection_est_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Statistics::release_connection_est() {
  // @@protoc_insertion_point(field_release:cauchy.Statistics.connection_est)
  
  return connection_est_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Statistics::set_allocated_connection_est(::std::string* connection_est) {
  if (connection_est != NULL) {
    
  } else {
    
  }
  connection_est_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_est);
  // @@protoc_insertion_point(field_set_allocated:cauchy.Statistics.connection_est)
}

// string error_log = 3;
void Statistics::clear_error_log() {
  error_log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Statistics::error_log() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.error_log)
  return error_log_.GetNoArena();
}
void Statistics::set_error_log(const ::std::string& value) {
  
  error_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cauchy.Statistics.error_log)
}
#if LANG_CXX11
void Statistics::set_error_log(::std::string&& value) {
  
  error_log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cauchy.Statistics.error_log)
}
#endif
void Statistics::set_error_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cauchy.Statistics.error_log)
}
void Statistics::set_error_log(const char* value, size_t size) {
  
  error_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cauchy.Statistics.error_log)
}
::std::string* Statistics::mutable_error_log() {
  
  // @@protoc_insertion_point(field_mutable:cauchy.Statistics.error_log)
  return error_log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Statistics::release_error_log() {
  // @@protoc_insertion_point(field_release:cauchy.Statistics.error_log)
  
  return error_log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Statistics::set_allocated_error_log(::std::string* error_log) {
  if (error_log != NULL) {
    
  } else {
    
  }
  error_log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_log);
  // @@protoc_insertion_point(field_set_allocated:cauchy.Statistics.error_log)
}

// uint32 ping = 4;
void Statistics::clear_ping() {
  ping_ = 0u;
}
::google::protobuf::uint32 Statistics::ping() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.ping)
  return ping_;
}
void Statistics::set_ping(::google::protobuf::uint32 value) {
  
  ping_ = value;
  // @@protoc_insertion_point(field_set:cauchy.Statistics.ping)
}

// uint32 n_threads = 5;
void Statistics::clear_n_threads() {
  n_threads_ = 0u;
}
::google::protobuf::uint32 Statistics::n_threads() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.n_threads)
  return n_threads_;
}
void Statistics::set_n_threads(::google::protobuf::uint32 value) {
  
  n_threads_ = value;
  // @@protoc_insertion_point(field_set:cauchy.Statistics.n_threads)
}

// repeated .cauchy.Hashrate hashrate = 6;
int Statistics::hashrate_size() const {
  return hashrate_.size();
}
void Statistics::clear_hashrate() {
  hashrate_.Clear();
}
const ::cauchy::Hashrate& Statistics::hashrate(int index) const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.hashrate)
  return hashrate_.Get(index);
}
::cauchy::Hashrate* Statistics::mutable_hashrate(int index) {
  // @@protoc_insertion_point(field_mutable:cauchy.Statistics.hashrate)
  return hashrate_.Mutable(index);
}
::cauchy::Hashrate* Statistics::add_hashrate() {
  // @@protoc_insertion_point(field_add:cauchy.Statistics.hashrate)
  return hashrate_.Add();
}
::google::protobuf::RepeatedPtrField< ::cauchy::Hashrate >*
Statistics::mutable_hashrate() {
  // @@protoc_insertion_point(field_mutable_list:cauchy.Statistics.hashrate)
  return &hashrate_;
}
const ::google::protobuf::RepeatedPtrField< ::cauchy::Hashrate >&
Statistics::hashrate() const {
  // @@protoc_insertion_point(field_list:cauchy.Statistics.hashrate)
  return hashrate_;
}

// bool connected = 7;
void Statistics::clear_connected() {
  connected_ = false;
}
bool Statistics::connected() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.connected)
  return connected_;
}
void Statistics::set_connected(bool value) {
  
  connected_ = value;
  // @@protoc_insertion_point(field_set:cauchy.Statistics.connected)
}

// bool running = 8;
void Statistics::clear_running() {
  running_ = false;
}
bool Statistics::running() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.running)
  return running_;
}
void Statistics::set_running(bool value) {
  
  running_ = value;
  // @@protoc_insertion_point(field_set:cauchy.Statistics.running)
}

// bool logged_in = 9;
void Statistics::clear_logged_in() {
  logged_in_ = false;
}
bool Statistics::logged_in() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.logged_in)
  return logged_in_;
}
void Statistics::set_logged_in(bool value) {
  
  logged_in_ = value;
  // @@protoc_insertion_point(field_set:cauchy.Statistics.logged_in)
}

// .cauchy.ResultReport report = 10;
bool Statistics::has_report() const {
  return this != internal_default_instance() && report_ != NULL;
}
void Statistics::clear_report() {
  if (GetArenaNoVirtual() == NULL && report_ != NULL) delete report_;
  report_ = NULL;
}
const ::cauchy::ResultReport& Statistics::report() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.report)
  return report_ != NULL ? *report_
                         : *::cauchy::ResultReport::internal_default_instance();
}
::cauchy::ResultReport* Statistics::mutable_report() {
  
  if (report_ == NULL) {
    report_ = new ::cauchy::ResultReport;
  }
  // @@protoc_insertion_point(field_mutable:cauchy.Statistics.report)
  return report_;
}
::cauchy::ResultReport* Statistics::release_report() {
  // @@protoc_insertion_point(field_release:cauchy.Statistics.report)
  
  ::cauchy::ResultReport* temp = report_;
  report_ = NULL;
  return temp;
}
void Statistics::set_allocated_report(::cauchy::ResultReport* report) {
  delete report_;
  report_ = report;
  if (report) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cauchy.Statistics.report)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultReport::kDiffFieldNumber;
const int ResultReport::kGoodResultsFieldNumber;
const int ResultReport::kTotalResultsFieldNumber;
const int ResultReport::kAverageResultTimeFieldNumber;
const int ResultReport::kRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultReport::ResultReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_xmr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.ResultReport)
}
ResultReport::ResultReport(const ResultReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&diff_, &from.diff_,
    reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&diff_) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:cauchy.ResultReport)
}

void ResultReport::SharedCtor() {
  ::memset(&diff_, 0, reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&diff_) + sizeof(ratio_));
  _cached_size_ = 0;
}

ResultReport::~ResultReport() {
  // @@protoc_insertion_point(destructor:cauchy.ResultReport)
  SharedDtor();
}

void ResultReport::SharedDtor() {
}

void ResultReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultReport::descriptor() {
  protobuf_xmr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xmr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResultReport& ResultReport::default_instance() {
  protobuf_xmr_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResultReport* ResultReport::New(::google::protobuf::Arena* arena) const {
  ResultReport* n = new ResultReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultReport::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.ResultReport)
  ::memset(&diff_, 0, reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&diff_) + sizeof(ratio_));
}

bool ResultReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.ResultReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 diff = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 good_results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &good_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_results = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double average_result_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_result_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ratio = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.ResultReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.ResultReport)
  return false;
#undef DO_
}

void ResultReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.ResultReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 diff = 1;
  if (this->diff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->diff(), output);
  }

  // uint64 good_results = 2;
  if (this->good_results() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->good_results(), output);
  }

  // uint64 total_results = 3;
  if (this->total_results() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->total_results(), output);
  }

  // double average_result_time = 4;
  if (this->average_result_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->average_result_time(), output);
  }

  // double ratio = 5;
  if (this->ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ratio(), output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.ResultReport)
}

::google::protobuf::uint8* ResultReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.ResultReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 diff = 1;
  if (this->diff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->diff(), target);
  }

  // uint64 good_results = 2;
  if (this->good_results() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->good_results(), target);
  }

  // uint64 total_results = 3;
  if (this->total_results() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->total_results(), target);
  }

  // double average_result_time = 4;
  if (this->average_result_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->average_result_time(), target);
  }

  // double ratio = 5;
  if (this->ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ratio(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.ResultReport)
  return target;
}

size_t ResultReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.ResultReport)
  size_t total_size = 0;

  // uint64 diff = 1;
  if (this->diff() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->diff());
  }

  // uint64 good_results = 2;
  if (this->good_results() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->good_results());
  }

  // uint64 total_results = 3;
  if (this->total_results() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_results());
  }

  // double average_result_time = 4;
  if (this->average_result_time() != 0) {
    total_size += 1 + 8;
  }

  // double ratio = 5;
  if (this->ratio() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.ResultReport)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.ResultReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.ResultReport)
    MergeFrom(*source);
  }
}

void ResultReport::MergeFrom(const ResultReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.ResultReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diff() != 0) {
    set_diff(from.diff());
  }
  if (from.good_results() != 0) {
    set_good_results(from.good_results());
  }
  if (from.total_results() != 0) {
    set_total_results(from.total_results());
  }
  if (from.average_result_time() != 0) {
    set_average_result_time(from.average_result_time());
  }
  if (from.ratio() != 0) {
    set_ratio(from.ratio());
  }
}

void ResultReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.ResultReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultReport::CopyFrom(const ResultReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.ResultReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultReport::IsInitialized() const {
  return true;
}

void ResultReport::Swap(ResultReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultReport::InternalSwap(ResultReport* other) {
  std::swap(diff_, other->diff_);
  std::swap(good_results_, other->good_results_);
  std::swap(total_results_, other->total_results_);
  std::swap(average_result_time_, other->average_result_time_);
  std::swap(ratio_, other->ratio_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultReport::GetMetadata() const {
  protobuf_xmr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xmr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultReport

// uint64 diff = 1;
void ResultReport::clear_diff() {
  diff_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResultReport::diff() const {
  // @@protoc_insertion_point(field_get:cauchy.ResultReport.diff)
  return diff_;
}
void ResultReport::set_diff(::google::protobuf::uint64 value) {
  
  diff_ = value;
  // @@protoc_insertion_point(field_set:cauchy.ResultReport.diff)
}

// uint64 good_results = 2;
void ResultReport::clear_good_results() {
  good_results_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResultReport::good_results() const {
  // @@protoc_insertion_point(field_get:cauchy.ResultReport.good_results)
  return good_results_;
}
void ResultReport::set_good_results(::google::protobuf::uint64 value) {
  
  good_results_ = value;
  // @@protoc_insertion_point(field_set:cauchy.ResultReport.good_results)
}

// uint64 total_results = 3;
void ResultReport::clear_total_results() {
  total_results_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResultReport::total_results() const {
  // @@protoc_insertion_point(field_get:cauchy.ResultReport.total_results)
  return total_results_;
}
void ResultReport::set_total_results(::google::protobuf::uint64 value) {
  
  total_results_ = value;
  // @@protoc_insertion_point(field_set:cauchy.ResultReport.total_results)
}

// double average_result_time = 4;
void ResultReport::clear_average_result_time() {
  average_result_time_ = 0;
}
double ResultReport::average_result_time() const {
  // @@protoc_insertion_point(field_get:cauchy.ResultReport.average_result_time)
  return average_result_time_;
}
void ResultReport::set_average_result_time(double value) {
  
  average_result_time_ = value;
  // @@protoc_insertion_point(field_set:cauchy.ResultReport.average_result_time)
}

// double ratio = 5;
void ResultReport::clear_ratio() {
  ratio_ = 0;
}
double ResultReport::ratio() const {
  // @@protoc_insertion_point(field_get:cauchy.ResultReport.ratio)
  return ratio_;
}
void ResultReport::set_ratio(double value) {
  
  ratio_ = value;
  // @@protoc_insertion_point(field_set:cauchy.ResultReport.ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Hashrate::kHashrateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Hashrate::Hashrate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_xmr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.Hashrate)
}
Hashrate::Hashrate(const Hashrate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hashrate_ = from.hashrate_;
  // @@protoc_insertion_point(copy_constructor:cauchy.Hashrate)
}

void Hashrate::SharedCtor() {
  hashrate_ = 0;
  _cached_size_ = 0;
}

Hashrate::~Hashrate() {
  // @@protoc_insertion_point(destructor:cauchy.Hashrate)
  SharedDtor();
}

void Hashrate::SharedDtor() {
}

void Hashrate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hashrate::descriptor() {
  protobuf_xmr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xmr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Hashrate& Hashrate::default_instance() {
  protobuf_xmr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Hashrate* Hashrate::New(::google::protobuf::Arena* arena) const {
  Hashrate* n = new Hashrate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Hashrate::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.Hashrate)
  hashrate_ = 0;
}

bool Hashrate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.Hashrate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double hashrate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hashrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.Hashrate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.Hashrate)
  return false;
#undef DO_
}

void Hashrate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.Hashrate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double hashrate = 1;
  if (this->hashrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->hashrate(), output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.Hashrate)
}

::google::protobuf::uint8* Hashrate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.Hashrate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double hashrate = 1;
  if (this->hashrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->hashrate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.Hashrate)
  return target;
}

size_t Hashrate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.Hashrate)
  size_t total_size = 0;

  // double hashrate = 1;
  if (this->hashrate() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hashrate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.Hashrate)
  GOOGLE_DCHECK_NE(&from, this);
  const Hashrate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Hashrate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.Hashrate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.Hashrate)
    MergeFrom(*source);
  }
}

void Hashrate::MergeFrom(const Hashrate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.Hashrate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hashrate() != 0) {
    set_hashrate(from.hashrate());
  }
}

void Hashrate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.Hashrate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hashrate::CopyFrom(const Hashrate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.Hashrate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hashrate::IsInitialized() const {
  return true;
}

void Hashrate::Swap(Hashrate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Hashrate::InternalSwap(Hashrate* other) {
  std::swap(hashrate_, other->hashrate_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Hashrate::GetMetadata() const {
  protobuf_xmr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xmr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Hashrate

// double hashrate = 1;
void Hashrate::clear_hashrate() {
  hashrate_ = 0;
}
double Hashrate::hashrate() const {
  // @@protoc_insertion_point(field_get:cauchy.Hashrate.hashrate)
  return hashrate_;
}
void Hashrate::set_hashrate(double value) {
  
  hashrate_ = value;
  // @@protoc_insertion_point(field_set:cauchy.Hashrate.hashrate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cauchy

// @@protoc_insertion_point(global_scope)
