// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xmr.proto

#ifndef PROTOBUF_xmr_2eproto__INCLUDED
#define PROTOBUF_xmr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace cauchy {
class Hashrate;
class HashrateDefaultTypeInternal;
extern HashrateDefaultTypeInternal _Hashrate_default_instance_;
class ResultReport;
class ResultReportDefaultTypeInternal;
extern ResultReportDefaultTypeInternal _ResultReport_default_instance_;
class Statistics;
class StatisticsDefaultTypeInternal;
extern StatisticsDefaultTypeInternal _Statistics_default_instance_;
}  // namespace cauchy

namespace cauchy {

namespace protobuf_xmr_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_xmr_2eproto

// ===================================================================

class Statistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cauchy.Statistics) */ {
 public:
  Statistics();
  virtual ~Statistics();

  Statistics(const Statistics& from);

  inline Statistics& operator=(const Statistics& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Statistics& default_instance();

  static inline const Statistics* internal_default_instance() {
    return reinterpret_cast<const Statistics*>(
               &_Statistics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Statistics* other);

  // implements Message ----------------------------------------------

  inline Statistics* New() const PROTOBUF_FINAL { return New(NULL); }

  Statistics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Statistics& from);
  void MergeFrom(const Statistics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Statistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cauchy.Hashrate hashrate = 6;
  int hashrate_size() const;
  void clear_hashrate();
  static const int kHashrateFieldNumber = 6;
  const ::cauchy::Hashrate& hashrate(int index) const;
  ::cauchy::Hashrate* mutable_hashrate(int index);
  ::cauchy::Hashrate* add_hashrate();
  ::google::protobuf::RepeatedPtrField< ::cauchy::Hashrate >*
      mutable_hashrate();
  const ::google::protobuf::RepeatedPtrField< ::cauchy::Hashrate >&
      hashrate() const;

  // string pool_address = 1;
  void clear_pool_address();
  static const int kPoolAddressFieldNumber = 1;
  const ::std::string& pool_address() const;
  void set_pool_address(const ::std::string& value);
  #if LANG_CXX11
  void set_pool_address(::std::string&& value);
  #endif
  void set_pool_address(const char* value);
  void set_pool_address(const char* value, size_t size);
  ::std::string* mutable_pool_address();
  ::std::string* release_pool_address();
  void set_allocated_pool_address(::std::string* pool_address);

  // string connection_est = 2;
  void clear_connection_est();
  static const int kConnectionEstFieldNumber = 2;
  const ::std::string& connection_est() const;
  void set_connection_est(const ::std::string& value);
  #if LANG_CXX11
  void set_connection_est(::std::string&& value);
  #endif
  void set_connection_est(const char* value);
  void set_connection_est(const char* value, size_t size);
  ::std::string* mutable_connection_est();
  ::std::string* release_connection_est();
  void set_allocated_connection_est(::std::string* connection_est);

  // string error_log = 3;
  void clear_error_log();
  static const int kErrorLogFieldNumber = 3;
  const ::std::string& error_log() const;
  void set_error_log(const ::std::string& value);
  #if LANG_CXX11
  void set_error_log(::std::string&& value);
  #endif
  void set_error_log(const char* value);
  void set_error_log(const char* value, size_t size);
  ::std::string* mutable_error_log();
  ::std::string* release_error_log();
  void set_allocated_error_log(::std::string* error_log);

  // .cauchy.ResultReport report = 10;
  bool has_report() const;
  void clear_report();
  static const int kReportFieldNumber = 10;
  const ::cauchy::ResultReport& report() const;
  ::cauchy::ResultReport* mutable_report();
  ::cauchy::ResultReport* release_report();
  void set_allocated_report(::cauchy::ResultReport* report);

  // uint32 ping = 4;
  void clear_ping();
  static const int kPingFieldNumber = 4;
  ::google::protobuf::uint32 ping() const;
  void set_ping(::google::protobuf::uint32 value);

  // uint32 n_threads = 5;
  void clear_n_threads();
  static const int kNThreadsFieldNumber = 5;
  ::google::protobuf::uint32 n_threads() const;
  void set_n_threads(::google::protobuf::uint32 value);

  // bool connected = 7;
  void clear_connected();
  static const int kConnectedFieldNumber = 7;
  bool connected() const;
  void set_connected(bool value);

  // bool running = 8;
  void clear_running();
  static const int kRunningFieldNumber = 8;
  bool running() const;
  void set_running(bool value);

  // bool logged_in = 9;
  void clear_logged_in();
  static const int kLoggedInFieldNumber = 9;
  bool logged_in() const;
  void set_logged_in(bool value);

  // @@protoc_insertion_point(class_scope:cauchy.Statistics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cauchy::Hashrate > hashrate_;
  ::google::protobuf::internal::ArenaStringPtr pool_address_;
  ::google::protobuf::internal::ArenaStringPtr connection_est_;
  ::google::protobuf::internal::ArenaStringPtr error_log_;
  ::cauchy::ResultReport* report_;
  ::google::protobuf::uint32 ping_;
  ::google::protobuf::uint32 n_threads_;
  bool connected_;
  bool running_;
  bool logged_in_;
  mutable int _cached_size_;
  friend struct protobuf_xmr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResultReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cauchy.ResultReport) */ {
 public:
  ResultReport();
  virtual ~ResultReport();

  ResultReport(const ResultReport& from);

  inline ResultReport& operator=(const ResultReport& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultReport& default_instance();

  static inline const ResultReport* internal_default_instance() {
    return reinterpret_cast<const ResultReport*>(
               &_ResultReport_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ResultReport* other);

  // implements Message ----------------------------------------------

  inline ResultReport* New() const PROTOBUF_FINAL { return New(NULL); }

  ResultReport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResultReport& from);
  void MergeFrom(const ResultReport& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResultReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 diff = 1;
  void clear_diff();
  static const int kDiffFieldNumber = 1;
  ::google::protobuf::uint64 diff() const;
  void set_diff(::google::protobuf::uint64 value);

  // uint64 good_results = 2;
  void clear_good_results();
  static const int kGoodResultsFieldNumber = 2;
  ::google::protobuf::uint64 good_results() const;
  void set_good_results(::google::protobuf::uint64 value);

  // uint64 total_results = 3;
  void clear_total_results();
  static const int kTotalResultsFieldNumber = 3;
  ::google::protobuf::uint64 total_results() const;
  void set_total_results(::google::protobuf::uint64 value);

  // double average_result_time = 4;
  void clear_average_result_time();
  static const int kAverageResultTimeFieldNumber = 4;
  double average_result_time() const;
  void set_average_result_time(double value);

  // double ratio = 5;
  void clear_ratio();
  static const int kRatioFieldNumber = 5;
  double ratio() const;
  void set_ratio(double value);

  // @@protoc_insertion_point(class_scope:cauchy.ResultReport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 diff_;
  ::google::protobuf::uint64 good_results_;
  ::google::protobuf::uint64 total_results_;
  double average_result_time_;
  double ratio_;
  mutable int _cached_size_;
  friend struct protobuf_xmr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Hashrate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cauchy.Hashrate) */ {
 public:
  Hashrate();
  virtual ~Hashrate();

  Hashrate(const Hashrate& from);

  inline Hashrate& operator=(const Hashrate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Hashrate& default_instance();

  static inline const Hashrate* internal_default_instance() {
    return reinterpret_cast<const Hashrate*>(
               &_Hashrate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Hashrate* other);

  // implements Message ----------------------------------------------

  inline Hashrate* New() const PROTOBUF_FINAL { return New(NULL); }

  Hashrate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Hashrate& from);
  void MergeFrom(const Hashrate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Hashrate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double hashrate = 1;
  void clear_hashrate();
  static const int kHashrateFieldNumber = 1;
  double hashrate() const;
  void set_hashrate(double value);

  // @@protoc_insertion_point(class_scope:cauchy.Hashrate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double hashrate_;
  mutable int _cached_size_;
  friend struct protobuf_xmr_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Statistics

// string pool_address = 1;
inline void Statistics::clear_pool_address() {
  pool_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Statistics::pool_address() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.pool_address)
  return pool_address_.GetNoArena();
}
inline void Statistics::set_pool_address(const ::std::string& value) {
  
  pool_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cauchy.Statistics.pool_address)
}
#if LANG_CXX11
inline void Statistics::set_pool_address(::std::string&& value) {
  
  pool_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cauchy.Statistics.pool_address)
}
#endif
inline void Statistics::set_pool_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pool_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cauchy.Statistics.pool_address)
}
inline void Statistics::set_pool_address(const char* value, size_t size) {
  
  pool_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cauchy.Statistics.pool_address)
}
inline ::std::string* Statistics::mutable_pool_address() {
  
  // @@protoc_insertion_point(field_mutable:cauchy.Statistics.pool_address)
  return pool_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Statistics::release_pool_address() {
  // @@protoc_insertion_point(field_release:cauchy.Statistics.pool_address)
  
  return pool_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Statistics::set_allocated_pool_address(::std::string* pool_address) {
  if (pool_address != NULL) {
    
  } else {
    
  }
  pool_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pool_address);
  // @@protoc_insertion_point(field_set_allocated:cauchy.Statistics.pool_address)
}

// string connection_est = 2;
inline void Statistics::clear_connection_est() {
  connection_est_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Statistics::connection_est() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.connection_est)
  return connection_est_.GetNoArena();
}
inline void Statistics::set_connection_est(const ::std::string& value) {
  
  connection_est_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cauchy.Statistics.connection_est)
}
#if LANG_CXX11
inline void Statistics::set_connection_est(::std::string&& value) {
  
  connection_est_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cauchy.Statistics.connection_est)
}
#endif
inline void Statistics::set_connection_est(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connection_est_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cauchy.Statistics.connection_est)
}
inline void Statistics::set_connection_est(const char* value, size_t size) {
  
  connection_est_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cauchy.Statistics.connection_est)
}
inline ::std::string* Statistics::mutable_connection_est() {
  
  // @@protoc_insertion_point(field_mutable:cauchy.Statistics.connection_est)
  return connection_est_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Statistics::release_connection_est() {
  // @@protoc_insertion_point(field_release:cauchy.Statistics.connection_est)
  
  return connection_est_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Statistics::set_allocated_connection_est(::std::string* connection_est) {
  if (connection_est != NULL) {
    
  } else {
    
  }
  connection_est_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_est);
  // @@protoc_insertion_point(field_set_allocated:cauchy.Statistics.connection_est)
}

// string error_log = 3;
inline void Statistics::clear_error_log() {
  error_log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Statistics::error_log() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.error_log)
  return error_log_.GetNoArena();
}
inline void Statistics::set_error_log(const ::std::string& value) {
  
  error_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cauchy.Statistics.error_log)
}
#if LANG_CXX11
inline void Statistics::set_error_log(::std::string&& value) {
  
  error_log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cauchy.Statistics.error_log)
}
#endif
inline void Statistics::set_error_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cauchy.Statistics.error_log)
}
inline void Statistics::set_error_log(const char* value, size_t size) {
  
  error_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cauchy.Statistics.error_log)
}
inline ::std::string* Statistics::mutable_error_log() {
  
  // @@protoc_insertion_point(field_mutable:cauchy.Statistics.error_log)
  return error_log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Statistics::release_error_log() {
  // @@protoc_insertion_point(field_release:cauchy.Statistics.error_log)
  
  return error_log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Statistics::set_allocated_error_log(::std::string* error_log) {
  if (error_log != NULL) {
    
  } else {
    
  }
  error_log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_log);
  // @@protoc_insertion_point(field_set_allocated:cauchy.Statistics.error_log)
}

// uint32 ping = 4;
inline void Statistics::clear_ping() {
  ping_ = 0u;
}
inline ::google::protobuf::uint32 Statistics::ping() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.ping)
  return ping_;
}
inline void Statistics::set_ping(::google::protobuf::uint32 value) {
  
  ping_ = value;
  // @@protoc_insertion_point(field_set:cauchy.Statistics.ping)
}

// uint32 n_threads = 5;
inline void Statistics::clear_n_threads() {
  n_threads_ = 0u;
}
inline ::google::protobuf::uint32 Statistics::n_threads() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.n_threads)
  return n_threads_;
}
inline void Statistics::set_n_threads(::google::protobuf::uint32 value) {
  
  n_threads_ = value;
  // @@protoc_insertion_point(field_set:cauchy.Statistics.n_threads)
}

// repeated .cauchy.Hashrate hashrate = 6;
inline int Statistics::hashrate_size() const {
  return hashrate_.size();
}
inline void Statistics::clear_hashrate() {
  hashrate_.Clear();
}
inline const ::cauchy::Hashrate& Statistics::hashrate(int index) const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.hashrate)
  return hashrate_.Get(index);
}
inline ::cauchy::Hashrate* Statistics::mutable_hashrate(int index) {
  // @@protoc_insertion_point(field_mutable:cauchy.Statistics.hashrate)
  return hashrate_.Mutable(index);
}
inline ::cauchy::Hashrate* Statistics::add_hashrate() {
  // @@protoc_insertion_point(field_add:cauchy.Statistics.hashrate)
  return hashrate_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cauchy::Hashrate >*
Statistics::mutable_hashrate() {
  // @@protoc_insertion_point(field_mutable_list:cauchy.Statistics.hashrate)
  return &hashrate_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cauchy::Hashrate >&
Statistics::hashrate() const {
  // @@protoc_insertion_point(field_list:cauchy.Statistics.hashrate)
  return hashrate_;
}

// bool connected = 7;
inline void Statistics::clear_connected() {
  connected_ = false;
}
inline bool Statistics::connected() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.connected)
  return connected_;
}
inline void Statistics::set_connected(bool value) {
  
  connected_ = value;
  // @@protoc_insertion_point(field_set:cauchy.Statistics.connected)
}

// bool running = 8;
inline void Statistics::clear_running() {
  running_ = false;
}
inline bool Statistics::running() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.running)
  return running_;
}
inline void Statistics::set_running(bool value) {
  
  running_ = value;
  // @@protoc_insertion_point(field_set:cauchy.Statistics.running)
}

// bool logged_in = 9;
inline void Statistics::clear_logged_in() {
  logged_in_ = false;
}
inline bool Statistics::logged_in() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.logged_in)
  return logged_in_;
}
inline void Statistics::set_logged_in(bool value) {
  
  logged_in_ = value;
  // @@protoc_insertion_point(field_set:cauchy.Statistics.logged_in)
}

// .cauchy.ResultReport report = 10;
inline bool Statistics::has_report() const {
  return this != internal_default_instance() && report_ != NULL;
}
inline void Statistics::clear_report() {
  if (GetArenaNoVirtual() == NULL && report_ != NULL) delete report_;
  report_ = NULL;
}
inline const ::cauchy::ResultReport& Statistics::report() const {
  // @@protoc_insertion_point(field_get:cauchy.Statistics.report)
  return report_ != NULL ? *report_
                         : *::cauchy::ResultReport::internal_default_instance();
}
inline ::cauchy::ResultReport* Statistics::mutable_report() {
  
  if (report_ == NULL) {
    report_ = new ::cauchy::ResultReport;
  }
  // @@protoc_insertion_point(field_mutable:cauchy.Statistics.report)
  return report_;
}
inline ::cauchy::ResultReport* Statistics::release_report() {
  // @@protoc_insertion_point(field_release:cauchy.Statistics.report)
  
  ::cauchy::ResultReport* temp = report_;
  report_ = NULL;
  return temp;
}
inline void Statistics::set_allocated_report(::cauchy::ResultReport* report) {
  delete report_;
  report_ = report;
  if (report) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cauchy.Statistics.report)
}

// -------------------------------------------------------------------

// ResultReport

// uint64 diff = 1;
inline void ResultReport::clear_diff() {
  diff_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ResultReport::diff() const {
  // @@protoc_insertion_point(field_get:cauchy.ResultReport.diff)
  return diff_;
}
inline void ResultReport::set_diff(::google::protobuf::uint64 value) {
  
  diff_ = value;
  // @@protoc_insertion_point(field_set:cauchy.ResultReport.diff)
}

// uint64 good_results = 2;
inline void ResultReport::clear_good_results() {
  good_results_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ResultReport::good_results() const {
  // @@protoc_insertion_point(field_get:cauchy.ResultReport.good_results)
  return good_results_;
}
inline void ResultReport::set_good_results(::google::protobuf::uint64 value) {
  
  good_results_ = value;
  // @@protoc_insertion_point(field_set:cauchy.ResultReport.good_results)
}

// uint64 total_results = 3;
inline void ResultReport::clear_total_results() {
  total_results_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ResultReport::total_results() const {
  // @@protoc_insertion_point(field_get:cauchy.ResultReport.total_results)
  return total_results_;
}
inline void ResultReport::set_total_results(::google::protobuf::uint64 value) {
  
  total_results_ = value;
  // @@protoc_insertion_point(field_set:cauchy.ResultReport.total_results)
}

// double average_result_time = 4;
inline void ResultReport::clear_average_result_time() {
  average_result_time_ = 0;
}
inline double ResultReport::average_result_time() const {
  // @@protoc_insertion_point(field_get:cauchy.ResultReport.average_result_time)
  return average_result_time_;
}
inline void ResultReport::set_average_result_time(double value) {
  
  average_result_time_ = value;
  // @@protoc_insertion_point(field_set:cauchy.ResultReport.average_result_time)
}

// double ratio = 5;
inline void ResultReport::clear_ratio() {
  ratio_ = 0;
}
inline double ResultReport::ratio() const {
  // @@protoc_insertion_point(field_get:cauchy.ResultReport.ratio)
  return ratio_;
}
inline void ResultReport::set_ratio(double value) {
  
  ratio_ = value;
  // @@protoc_insertion_point(field_set:cauchy.ResultReport.ratio)
}

// -------------------------------------------------------------------

// Hashrate

// double hashrate = 1;
inline void Hashrate::clear_hashrate() {
  hashrate_ = 0;
}
inline double Hashrate::hashrate() const {
  // @@protoc_insertion_point(field_get:cauchy.Hashrate.hashrate)
  return hashrate_;
}
inline void Hashrate::set_hashrate(double value) {
  
  hashrate_ = value;
  // @@protoc_insertion_point(field_set:cauchy.Hashrate.hashrate)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace cauchy

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_xmr_2eproto__INCLUDED
