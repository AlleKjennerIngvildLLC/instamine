// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cauchy {
class EventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Event> {
  public:
  const ::cauchy::Connection* connection_;
  const ::cauchy::StatusReply* reply_;
  const ::cauchy::Error* error_;
  const ::cauchy::End* end_;
  const ::cauchy::Empty* empty_;
  const ::cauchy::MiningResult* result_;
  const ::cauchy::Job* job_;
} _Event_default_instance_;
class ConnectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Connection> {
} _Connection_default_instance_;
class MiningResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MiningResult> {
} _MiningResult_default_instance_;
class JobDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Job> {
} _Job_default_instance_;
class DifficultyChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DifficultyChange> {
} _DifficultyChange_default_instance_;
class ErrorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Error> {
} _Error_default_instance_;
class EndDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<End> {
} _End_default_instance_;
class EmptyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Empty> {
} _Empty_default_instance_;
class StatusRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StatusRequest> {
} _StatusRequest_default_instance_;
class StatusReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StatusReply> {
} _StatusReply_default_instance_;
class SystemStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SystemStatus> {
} _SystemStatus_default_instance_;

namespace protobuf_messages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Event_default_instance_), connection_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Event_default_instance_), reply_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Event_default_instance_), error_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Event_default_instance_), end_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Event_default_instance_), empty_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Event_default_instance_), result_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Event_default_instance_), job_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, pool_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiningResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiningResult, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, diff_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifficultyChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(End, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(End, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusReply, miner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusReply, stats_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStatus, running_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStatus, miner_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Event)},
  { 15, -1, sizeof(Connection)},
  { 21, -1, sizeof(MiningResult)},
  { 27, -1, sizeof(Job)},
  { 33, -1, sizeof(DifficultyChange)},
  { 38, -1, sizeof(Error)},
  { 44, -1, sizeof(End)},
  { 50, -1, sizeof(Empty)},
  { 56, -1, sizeof(StatusRequest)},
  { 62, -1, sizeof(StatusReply)},
  { 69, -1, sizeof(SystemStatus)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Connection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MiningResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Job_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DifficultyChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_End_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Empty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StatusReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SystemStatus_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "messages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace

void TableStruct::Shutdown() {
  _Event_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Connection_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _MiningResult_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Job_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _DifficultyChange_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Error_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _End_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Empty_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _StatusRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _StatusReply_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SystemStatus_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cauchy::protobuf_xmr_2eproto::InitDefaults();
  ::cauchy::protobuf_command_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _Event_default_instance_.DefaultConstruct();
  _Connection_default_instance_.DefaultConstruct();
  _MiningResult_default_instance_.DefaultConstruct();
  _Job_default_instance_.DefaultConstruct();
  _DifficultyChange_default_instance_.DefaultConstruct();
  _Error_default_instance_.DefaultConstruct();
  _End_default_instance_.DefaultConstruct();
  _Empty_default_instance_.DefaultConstruct();
  _StatusRequest_default_instance_.DefaultConstruct();
  _StatusReply_default_instance_.DefaultConstruct();
  _SystemStatus_default_instance_.DefaultConstruct();
  _Event_default_instance_.connection_ = const_cast< ::cauchy::Connection*>(
      ::cauchy::Connection::internal_default_instance());
  _Event_default_instance_.reply_ = const_cast< ::cauchy::StatusReply*>(
      ::cauchy::StatusReply::internal_default_instance());
  _Event_default_instance_.error_ = const_cast< ::cauchy::Error*>(
      ::cauchy::Error::internal_default_instance());
  _Event_default_instance_.end_ = const_cast< ::cauchy::End*>(
      ::cauchy::End::internal_default_instance());
  _Event_default_instance_.empty_ = const_cast< ::cauchy::Empty*>(
      ::cauchy::Empty::internal_default_instance());
  _Event_default_instance_.result_ = const_cast< ::cauchy::MiningResult*>(
      ::cauchy::MiningResult::internal_default_instance());
  _Event_default_instance_.job_ = const_cast< ::cauchy::Job*>(
      ::cauchy::Job::internal_default_instance());
  _Event_default_instance_.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Event_default_instance_.get_mutable()->status_ = const_cast< ::cauchy::SystemStatus*>(
      ::cauchy::SystemStatus::internal_default_instance());
  _StatusReply_default_instance_.get_mutable()->stats_ = const_cast< ::cauchy::Statistics*>(
      ::cauchy::Statistics::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016messages.proto\022\006cauchy\032\txmr.proto\032\rcom"
      "mand.proto\032\037google/protobuf/timestamp.pr"
      "oto\"\324\002\n\005Event\022(\n\nconnection\030\001 \001(\0132\022.cauc"
      "hy.ConnectionH\000\022$\n\005reply\030\002 \001(\0132\023.cauchy."
      "StatusReplyH\000\022\036\n\005error\030\003 \001(\0132\r.cauchy.Er"
      "rorH\000\022\032\n\003end\030\004 \001(\0132\013.cauchy.EndH\000\022\036\n\005emp"
      "ty\030\005 \001(\0132\r.cauchy.EmptyH\000\022&\n\006result\030\006 \001("
      "\0132\024.cauchy.MiningResultH\000\022\032\n\003job\030\007 \001(\0132\013"
      ".cauchy.JobH\000\022-\n\ttimestamp\030\010 \001(\0132\032.googl"
      "e.protobuf.Timestamp\022$\n\006status\030\t \001(\0132\024.c"
      "auchy.SystemStatusB\006\n\004type\"\032\n\nConnection"
      "\022\014\n\004pool\030\001 \001(\t\"v\n\014MiningResult\022+\n\006result"
      "\030\001 \001(\0162\033.cauchy.MiningResult.Result\"9\n\006R"
      "esult\022\014\n\010REJECTED\020\000\022\014\n\010ACCEPTED\020\001\022\023\n\017UNA"
      "UTHENTICATED\020\003\"\023\n\003Job\022\014\n\004diff\030\001 \001(\004\"\022\n\020D"
      "ifficultyChange\"\030\n\005Error\022\017\n\007message\030\001 \001("
      "\t\"\025\n\003End\022\016\n\006status\030\001 \001(\t\"\027\n\005Empty\022\016\n\006sta"
      "tus\030\001 \001(\t\" \n\rStatusRequest\022\017\n\007message\030\001 "
      "\001(\t\"\224\001\n\013StatusReply\022(\n\005miner\030\001 \001(\0162\031.cau"
      "chy.StatusReply.Miner\022!\n\005stats\030\002 \001(\0132\022.c"
      "auchy.Statistics\"8\n\005Miner\022\013\n\007XMR_CPU\020\000\022\014"
      "\n\010XMR_CUDA\020\001\022\013\n\007XMR_AMD\020\002\022\007\n\003ETH\020\003\"\226\001\n\014S"
      "ystemStatus\022\017\n\007running\030\001 \001(\010\022)\n\005miner\030\002 "
      "\001(\0162\032.cauchy.SystemStatus.Miner\"J\n\005Miner"
      "\022\013\n\007XMR_CPU\020\000\022\014\n\010XMR_CUDA\020\001\022\013\n\007XMR_AMD\020\002"
      "\022\013\n\007ETH_CPU\020\003\022\014\n\010ETH_CUDA\020\004B\024\n\014cauchy.mi"
      "ner\242\002\003CHYb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1057);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
  ::cauchy::protobuf_xmr_2eproto::AddDescriptors();
  ::cauchy::protobuf_command_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_messages_2eproto

const ::google::protobuf::EnumDescriptor* MiningResult_Result_descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_enum_descriptors[0];
}
bool MiningResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MiningResult_Result MiningResult::REJECTED;
const MiningResult_Result MiningResult::ACCEPTED;
const MiningResult_Result MiningResult::UNAUTHENTICATED;
const MiningResult_Result MiningResult::Result_MIN;
const MiningResult_Result MiningResult::Result_MAX;
const int MiningResult::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StatusReply_Miner_descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_enum_descriptors[1];
}
bool StatusReply_Miner_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StatusReply_Miner StatusReply::XMR_CPU;
const StatusReply_Miner StatusReply::XMR_CUDA;
const StatusReply_Miner StatusReply::XMR_AMD;
const StatusReply_Miner StatusReply::ETH;
const StatusReply_Miner StatusReply::Miner_MIN;
const StatusReply_Miner StatusReply::Miner_MAX;
const int StatusReply::Miner_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemStatus_Miner_descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_enum_descriptors[2];
}
bool SystemStatus_Miner_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemStatus_Miner SystemStatus::XMR_CPU;
const SystemStatus_Miner SystemStatus::XMR_CUDA;
const SystemStatus_Miner SystemStatus::XMR_AMD;
const SystemStatus_Miner SystemStatus::ETH_CPU;
const SystemStatus_Miner SystemStatus::ETH_CUDA;
const SystemStatus_Miner SystemStatus::Miner_MIN;
const SystemStatus_Miner SystemStatus::Miner_MAX;
const int SystemStatus::Miner_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kConnectionFieldNumber;
const int Event::kReplyFieldNumber;
const int Event::kErrorFieldNumber;
const int Event::kEndFieldNumber;
const int Event::kEmptyFieldNumber;
const int Event::kResultFieldNumber;
const int Event::kJobFieldNumber;
const int Event::kTimestampFieldNumber;
const int Event::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::cauchy::SystemStatus(*from.status_);
  } else {
    status_ = NULL;
  }
  clear_has_type();
  switch (from.type_case()) {
    case kConnection: {
      mutable_connection()->::cauchy::Connection::MergeFrom(from.connection());
      break;
    }
    case kReply: {
      mutable_reply()->::cauchy::StatusReply::MergeFrom(from.reply());
      break;
    }
    case kError: {
      mutable_error()->::cauchy::Error::MergeFrom(from.error());
      break;
    }
    case kEnd: {
      mutable_end()->::cauchy::End::MergeFrom(from.end());
      break;
    }
    case kEmpty: {
      mutable_empty()->::cauchy::Empty::MergeFrom(from.empty());
      break;
    }
    case kResult: {
      mutable_result()->::cauchy::MiningResult::MergeFrom(from.result());
      break;
    }
    case kJob: {
      mutable_job()->::cauchy::Job::MergeFrom(from.job());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cauchy.Event)
}

void Event::SharedCtor() {
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(status_));
  clear_has_type();
  _cached_size_ = 0;
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:cauchy.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != internal_default_instance()) {
    delete timestamp_;
  }
  if (this != internal_default_instance()) {
    delete status_;
  }
  if (has_type()) {
    clear_type();
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event& Event::default_instance() {
  protobuf_messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:cauchy.Event)
  switch (type_case()) {
    case kConnection: {
      delete type_.connection_;
      break;
    }
    case kReply: {
      delete type_.reply_;
      break;
    }
    case kError: {
      delete type_.error_;
      break;
    }
    case kEnd: {
      delete type_.end_;
      break;
    }
    case kEmpty: {
      delete type_.empty_;
      break;
    }
    case kResult: {
      delete type_.result_;
      break;
    }
    case kJob: {
      delete type_.job_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.Event)
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  clear_type();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cauchy.Connection connection = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cauchy.StatusReply reply = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cauchy.Error error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cauchy.End end = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cauchy.Empty empty = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_empty()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cauchy.MiningResult result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cauchy.Job job = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cauchy.SystemStatus status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cauchy.Connection connection = 1;
  if (has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *type_.connection_, output);
  }

  // .cauchy.StatusReply reply = 2;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *type_.reply_, output);
  }

  // .cauchy.Error error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *type_.error_, output);
  }

  // .cauchy.End end = 4;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *type_.end_, output);
  }

  // .cauchy.Empty empty = 5;
  if (has_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *type_.empty_, output);
  }

  // .cauchy.MiningResult result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *type_.result_, output);
  }

  // .cauchy.Job job = 7;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *type_.job_, output);
  }

  // .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->timestamp_, output);
  }

  // .cauchy.SystemStatus status = 9;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cauchy.Connection connection = 1;
  if (has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *type_.connection_, deterministic, target);
  }

  // .cauchy.StatusReply reply = 2;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *type_.reply_, deterministic, target);
  }

  // .cauchy.Error error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *type_.error_, deterministic, target);
  }

  // .cauchy.End end = 4;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *type_.end_, deterministic, target);
  }

  // .cauchy.Empty empty = 5;
  if (has_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *type_.empty_, deterministic, target);
  }

  // .cauchy.MiningResult result = 6;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *type_.result_, deterministic, target);
  }

  // .cauchy.Job job = 7;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *type_.job_, deterministic, target);
  }

  // .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->timestamp_, deterministic, target);
  }

  // .cauchy.SystemStatus status = 9;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->status_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.Event)
  size_t total_size = 0;

  // .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // .cauchy.SystemStatus status = 9;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  switch (type_case()) {
    // .cauchy.Connection connection = 1;
    case kConnection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.connection_);
      break;
    }
    // .cauchy.StatusReply reply = 2;
    case kReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.reply_);
      break;
    }
    // .cauchy.Error error = 3;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.error_);
      break;
    }
    // .cauchy.End end = 4;
    case kEnd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.end_);
      break;
    }
    // .cauchy.Empty empty = 5;
    case kEmpty: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.empty_);
      break;
    }
    // .cauchy.MiningResult result = 6;
    case kResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.result_);
      break;
    }
    // .cauchy.Job job = 7;
    case kJob: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.job_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_status()) {
    mutable_status()->::cauchy::SystemStatus::MergeFrom(from.status());
  }
  switch (from.type_case()) {
    case kConnection: {
      mutable_connection()->::cauchy::Connection::MergeFrom(from.connection());
      break;
    }
    case kReply: {
      mutable_reply()->::cauchy::StatusReply::MergeFrom(from.reply());
      break;
    }
    case kError: {
      mutable_error()->::cauchy::Error::MergeFrom(from.error());
      break;
    }
    case kEnd: {
      mutable_end()->::cauchy::End::MergeFrom(from.end());
      break;
    }
    case kEmpty: {
      mutable_empty()->::cauchy::Empty::MergeFrom(from.empty());
      break;
    }
    case kResult: {
      mutable_result()->::cauchy::MiningResult::MergeFrom(from.result());
      break;
    }
    case kJob: {
      mutable_job()->::cauchy::Job::MergeFrom(from.job());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(status_, other->status_);
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// .cauchy.Connection connection = 1;
bool Event::has_connection() const {
  return type_case() == kConnection;
}
void Event::set_has_connection() {
  _oneof_case_[0] = kConnection;
}
void Event::clear_connection() {
  if (has_connection()) {
    delete type_.connection_;
    clear_has_type();
  }
}
 const ::cauchy::Connection& Event::connection() const {
  // @@protoc_insertion_point(field_get:cauchy.Event.connection)
  return has_connection()
      ? *type_.connection_
      : ::cauchy::Connection::default_instance();
}
::cauchy::Connection* Event::mutable_connection() {
  if (!has_connection()) {
    clear_type();
    set_has_connection();
    type_.connection_ = new ::cauchy::Connection;
  }
  // @@protoc_insertion_point(field_mutable:cauchy.Event.connection)
  return type_.connection_;
}
::cauchy::Connection* Event::release_connection() {
  // @@protoc_insertion_point(field_release:cauchy.Event.connection)
  if (has_connection()) {
    clear_has_type();
    ::cauchy::Connection* temp = type_.connection_;
    type_.connection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Event::set_allocated_connection(::cauchy::Connection* connection) {
  clear_type();
  if (connection) {
    set_has_connection();
    type_.connection_ = connection;
  }
  // @@protoc_insertion_point(field_set_allocated:cauchy.Event.connection)
}

// .cauchy.StatusReply reply = 2;
bool Event::has_reply() const {
  return type_case() == kReply;
}
void Event::set_has_reply() {
  _oneof_case_[0] = kReply;
}
void Event::clear_reply() {
  if (has_reply()) {
    delete type_.reply_;
    clear_has_type();
  }
}
 const ::cauchy::StatusReply& Event::reply() const {
  // @@protoc_insertion_point(field_get:cauchy.Event.reply)
  return has_reply()
      ? *type_.reply_
      : ::cauchy::StatusReply::default_instance();
}
::cauchy::StatusReply* Event::mutable_reply() {
  if (!has_reply()) {
    clear_type();
    set_has_reply();
    type_.reply_ = new ::cauchy::StatusReply;
  }
  // @@protoc_insertion_point(field_mutable:cauchy.Event.reply)
  return type_.reply_;
}
::cauchy::StatusReply* Event::release_reply() {
  // @@protoc_insertion_point(field_release:cauchy.Event.reply)
  if (has_reply()) {
    clear_has_type();
    ::cauchy::StatusReply* temp = type_.reply_;
    type_.reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Event::set_allocated_reply(::cauchy::StatusReply* reply) {
  clear_type();
  if (reply) {
    set_has_reply();
    type_.reply_ = reply;
  }
  // @@protoc_insertion_point(field_set_allocated:cauchy.Event.reply)
}

// .cauchy.Error error = 3;
bool Event::has_error() const {
  return type_case() == kError;
}
void Event::set_has_error() {
  _oneof_case_[0] = kError;
}
void Event::clear_error() {
  if (has_error()) {
    delete type_.error_;
    clear_has_type();
  }
}
 const ::cauchy::Error& Event::error() const {
  // @@protoc_insertion_point(field_get:cauchy.Event.error)
  return has_error()
      ? *type_.error_
      : ::cauchy::Error::default_instance();
}
::cauchy::Error* Event::mutable_error() {
  if (!has_error()) {
    clear_type();
    set_has_error();
    type_.error_ = new ::cauchy::Error;
  }
  // @@protoc_insertion_point(field_mutable:cauchy.Event.error)
  return type_.error_;
}
::cauchy::Error* Event::release_error() {
  // @@protoc_insertion_point(field_release:cauchy.Event.error)
  if (has_error()) {
    clear_has_type();
    ::cauchy::Error* temp = type_.error_;
    type_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Event::set_allocated_error(::cauchy::Error* error) {
  clear_type();
  if (error) {
    set_has_error();
    type_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:cauchy.Event.error)
}

// .cauchy.End end = 4;
bool Event::has_end() const {
  return type_case() == kEnd;
}
void Event::set_has_end() {
  _oneof_case_[0] = kEnd;
}
void Event::clear_end() {
  if (has_end()) {
    delete type_.end_;
    clear_has_type();
  }
}
 const ::cauchy::End& Event::end() const {
  // @@protoc_insertion_point(field_get:cauchy.Event.end)
  return has_end()
      ? *type_.end_
      : ::cauchy::End::default_instance();
}
::cauchy::End* Event::mutable_end() {
  if (!has_end()) {
    clear_type();
    set_has_end();
    type_.end_ = new ::cauchy::End;
  }
  // @@protoc_insertion_point(field_mutable:cauchy.Event.end)
  return type_.end_;
}
::cauchy::End* Event::release_end() {
  // @@protoc_insertion_point(field_release:cauchy.Event.end)
  if (has_end()) {
    clear_has_type();
    ::cauchy::End* temp = type_.end_;
    type_.end_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Event::set_allocated_end(::cauchy::End* end) {
  clear_type();
  if (end) {
    set_has_end();
    type_.end_ = end;
  }
  // @@protoc_insertion_point(field_set_allocated:cauchy.Event.end)
}

// .cauchy.Empty empty = 5;
bool Event::has_empty() const {
  return type_case() == kEmpty;
}
void Event::set_has_empty() {
  _oneof_case_[0] = kEmpty;
}
void Event::clear_empty() {
  if (has_empty()) {
    delete type_.empty_;
    clear_has_type();
  }
}
 const ::cauchy::Empty& Event::empty() const {
  // @@protoc_insertion_point(field_get:cauchy.Event.empty)
  return has_empty()
      ? *type_.empty_
      : ::cauchy::Empty::default_instance();
}
::cauchy::Empty* Event::mutable_empty() {
  if (!has_empty()) {
    clear_type();
    set_has_empty();
    type_.empty_ = new ::cauchy::Empty;
  }
  // @@protoc_insertion_point(field_mutable:cauchy.Event.empty)
  return type_.empty_;
}
::cauchy::Empty* Event::release_empty() {
  // @@protoc_insertion_point(field_release:cauchy.Event.empty)
  if (has_empty()) {
    clear_has_type();
    ::cauchy::Empty* temp = type_.empty_;
    type_.empty_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Event::set_allocated_empty(::cauchy::Empty* empty) {
  clear_type();
  if (empty) {
    set_has_empty();
    type_.empty_ = empty;
  }
  // @@protoc_insertion_point(field_set_allocated:cauchy.Event.empty)
}

// .cauchy.MiningResult result = 6;
bool Event::has_result() const {
  return type_case() == kResult;
}
void Event::set_has_result() {
  _oneof_case_[0] = kResult;
}
void Event::clear_result() {
  if (has_result()) {
    delete type_.result_;
    clear_has_type();
  }
}
 const ::cauchy::MiningResult& Event::result() const {
  // @@protoc_insertion_point(field_get:cauchy.Event.result)
  return has_result()
      ? *type_.result_
      : ::cauchy::MiningResult::default_instance();
}
::cauchy::MiningResult* Event::mutable_result() {
  if (!has_result()) {
    clear_type();
    set_has_result();
    type_.result_ = new ::cauchy::MiningResult;
  }
  // @@protoc_insertion_point(field_mutable:cauchy.Event.result)
  return type_.result_;
}
::cauchy::MiningResult* Event::release_result() {
  // @@protoc_insertion_point(field_release:cauchy.Event.result)
  if (has_result()) {
    clear_has_type();
    ::cauchy::MiningResult* temp = type_.result_;
    type_.result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Event::set_allocated_result(::cauchy::MiningResult* result) {
  clear_type();
  if (result) {
    set_has_result();
    type_.result_ = result;
  }
  // @@protoc_insertion_point(field_set_allocated:cauchy.Event.result)
}

// .cauchy.Job job = 7;
bool Event::has_job() const {
  return type_case() == kJob;
}
void Event::set_has_job() {
  _oneof_case_[0] = kJob;
}
void Event::clear_job() {
  if (has_job()) {
    delete type_.job_;
    clear_has_type();
  }
}
 const ::cauchy::Job& Event::job() const {
  // @@protoc_insertion_point(field_get:cauchy.Event.job)
  return has_job()
      ? *type_.job_
      : ::cauchy::Job::default_instance();
}
::cauchy::Job* Event::mutable_job() {
  if (!has_job()) {
    clear_type();
    set_has_job();
    type_.job_ = new ::cauchy::Job;
  }
  // @@protoc_insertion_point(field_mutable:cauchy.Event.job)
  return type_.job_;
}
::cauchy::Job* Event::release_job() {
  // @@protoc_insertion_point(field_release:cauchy.Event.job)
  if (has_job()) {
    clear_has_type();
    ::cauchy::Job* temp = type_.job_;
    type_.job_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Event::set_allocated_job(::cauchy::Job* job) {
  clear_type();
  if (job) {
    set_has_job();
    type_.job_ = job;
  }
  // @@protoc_insertion_point(field_set_allocated:cauchy.Event.job)
}

// .google.protobuf.Timestamp timestamp = 8;
bool Event::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void Event::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& Event::timestamp() const {
  // @@protoc_insertion_point(field_get:cauchy.Event.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Event::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cauchy.Event.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* Event::release_timestamp() {
  // @@protoc_insertion_point(field_release:cauchy.Event.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void Event::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cauchy.Event.timestamp)
}

// .cauchy.SystemStatus status = 9;
bool Event::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void Event::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::cauchy::SystemStatus& Event::status() const {
  // @@protoc_insertion_point(field_get:cauchy.Event.status)
  return status_ != NULL ? *status_
                         : *::cauchy::SystemStatus::internal_default_instance();
}
::cauchy::SystemStatus* Event::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::cauchy::SystemStatus;
  }
  // @@protoc_insertion_point(field_mutable:cauchy.Event.status)
  return status_;
}
::cauchy::SystemStatus* Event::release_status() {
  // @@protoc_insertion_point(field_release:cauchy.Event.status)
  
  ::cauchy::SystemStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void Event::set_allocated_status(::cauchy::SystemStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cauchy.Event.status)
}

bool Event::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void Event::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
Event::TypeCase Event::type_case() const {
  return Event::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Connection::kPoolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Connection::Connection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.Connection)
}
Connection::Connection(const Connection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pool_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pool().size() > 0) {
    pool_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pool_);
  }
  // @@protoc_insertion_point(copy_constructor:cauchy.Connection)
}

void Connection::SharedCtor() {
  pool_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:cauchy.Connection)
  SharedDtor();
}

void Connection::SharedDtor() {
  pool_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Connection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connection::descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Connection& Connection::default_instance() {
  protobuf_messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Connection* Connection::New(::google::protobuf::Arena* arena) const {
  Connection* n = new Connection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.Connection)
  pool_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Connection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.Connection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pool = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pool()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pool().data(), this->pool().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cauchy.Connection.pool"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.Connection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.Connection)
  return false;
#undef DO_
}

void Connection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pool = 1;
  if (this->pool().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pool().data(), this->pool().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.Connection.pool");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pool(), output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.Connection)
}

::google::protobuf::uint8* Connection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pool = 1;
  if (this->pool().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pool().data(), this->pool().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.Connection.pool");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pool(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.Connection)
  return target;
}

size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.Connection)
  size_t total_size = 0;

  // string pool = 1;
  if (this->pool().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pool());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  const Connection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Connection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.Connection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.Connection)
    MergeFrom(*source);
  }
}

void Connection::MergeFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pool().size() > 0) {

    pool_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pool_);
  }
}

void Connection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  return true;
}

void Connection::Swap(Connection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Connection::InternalSwap(Connection* other) {
  pool_.Swap(&other->pool_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Connection::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Connection

// string pool = 1;
void Connection::clear_pool() {
  pool_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Connection::pool() const {
  // @@protoc_insertion_point(field_get:cauchy.Connection.pool)
  return pool_.GetNoArena();
}
void Connection::set_pool(const ::std::string& value) {
  
  pool_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cauchy.Connection.pool)
}
#if LANG_CXX11
void Connection::set_pool(::std::string&& value) {
  
  pool_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cauchy.Connection.pool)
}
#endif
void Connection::set_pool(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pool_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cauchy.Connection.pool)
}
void Connection::set_pool(const char* value, size_t size) {
  
  pool_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cauchy.Connection.pool)
}
::std::string* Connection::mutable_pool() {
  
  // @@protoc_insertion_point(field_mutable:cauchy.Connection.pool)
  return pool_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Connection::release_pool() {
  // @@protoc_insertion_point(field_release:cauchy.Connection.pool)
  
  return pool_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Connection::set_allocated_pool(::std::string* pool) {
  if (pool != NULL) {
    
  } else {
    
  }
  pool_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pool);
  // @@protoc_insertion_point(field_set_allocated:cauchy.Connection.pool)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MiningResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MiningResult::MiningResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.MiningResult)
}
MiningResult::MiningResult(const MiningResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:cauchy.MiningResult)
}

void MiningResult::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

MiningResult::~MiningResult() {
  // @@protoc_insertion_point(destructor:cauchy.MiningResult)
  SharedDtor();
}

void MiningResult::SharedDtor() {
}

void MiningResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MiningResult::descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MiningResult& MiningResult::default_instance() {
  protobuf_messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

MiningResult* MiningResult::New(::google::protobuf::Arena* arena) const {
  MiningResult* n = new MiningResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MiningResult::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.MiningResult)
  result_ = 0;
}

bool MiningResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.MiningResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cauchy.MiningResult.Result result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::cauchy::MiningResult_Result >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.MiningResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.MiningResult)
  return false;
#undef DO_
}

void MiningResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.MiningResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cauchy.MiningResult.Result result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.MiningResult)
}

::google::protobuf::uint8* MiningResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.MiningResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cauchy.MiningResult.Result result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.MiningResult)
  return target;
}

size_t MiningResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.MiningResult)
  size_t total_size = 0;

  // .cauchy.MiningResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MiningResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.MiningResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MiningResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MiningResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.MiningResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.MiningResult)
    MergeFrom(*source);
  }
}

void MiningResult::MergeFrom(const MiningResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.MiningResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MiningResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.MiningResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiningResult::CopyFrom(const MiningResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.MiningResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiningResult::IsInitialized() const {
  return true;
}

void MiningResult::Swap(MiningResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MiningResult::InternalSwap(MiningResult* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MiningResult::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MiningResult

// .cauchy.MiningResult.Result result = 1;
void MiningResult::clear_result() {
  result_ = 0;
}
::cauchy::MiningResult_Result MiningResult::result() const {
  // @@protoc_insertion_point(field_get:cauchy.MiningResult.result)
  return static_cast< ::cauchy::MiningResult_Result >(result_);
}
void MiningResult::set_result(::cauchy::MiningResult_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:cauchy.MiningResult.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Job::kDiffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Job::Job()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.Job)
}
Job::Job(const Job& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diff_ = from.diff_;
  // @@protoc_insertion_point(copy_constructor:cauchy.Job)
}

void Job::SharedCtor() {
  diff_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Job::~Job() {
  // @@protoc_insertion_point(destructor:cauchy.Job)
  SharedDtor();
}

void Job::SharedDtor() {
}

void Job::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Job::descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Job& Job::default_instance() {
  protobuf_messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Job* Job::New(::google::protobuf::Arena* arena) const {
  Job* n = new Job;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Job::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.Job)
  diff_ = GOOGLE_ULONGLONG(0);
}

bool Job::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.Job)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 diff = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.Job)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.Job)
  return false;
#undef DO_
}

void Job::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.Job)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 diff = 1;
  if (this->diff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->diff(), output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.Job)
}

::google::protobuf::uint8* Job::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.Job)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 diff = 1;
  if (this->diff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->diff(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.Job)
  return target;
}

size_t Job::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.Job)
  size_t total_size = 0;

  // uint64 diff = 1;
  if (this->diff() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->diff());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Job::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.Job)
  GOOGLE_DCHECK_NE(&from, this);
  const Job* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Job>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.Job)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.Job)
    MergeFrom(*source);
  }
}

void Job::MergeFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.Job)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diff() != 0) {
    set_diff(from.diff());
  }
}

void Job::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Job::CopyFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Job::IsInitialized() const {
  return true;
}

void Job::Swap(Job* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Job::InternalSwap(Job* other) {
  std::swap(diff_, other->diff_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Job::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Job

// uint64 diff = 1;
void Job::clear_diff() {
  diff_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Job::diff() const {
  // @@protoc_insertion_point(field_get:cauchy.Job.diff)
  return diff_;
}
void Job::set_diff(::google::protobuf::uint64 value) {
  
  diff_ = value;
  // @@protoc_insertion_point(field_set:cauchy.Job.diff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DifficultyChange::DifficultyChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.DifficultyChange)
}
DifficultyChange::DifficultyChange(const DifficultyChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cauchy.DifficultyChange)
}

void DifficultyChange::SharedCtor() {
  _cached_size_ = 0;
}

DifficultyChange::~DifficultyChange() {
  // @@protoc_insertion_point(destructor:cauchy.DifficultyChange)
  SharedDtor();
}

void DifficultyChange::SharedDtor() {
}

void DifficultyChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DifficultyChange::descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DifficultyChange& DifficultyChange::default_instance() {
  protobuf_messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

DifficultyChange* DifficultyChange::New(::google::protobuf::Arena* arena) const {
  DifficultyChange* n = new DifficultyChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DifficultyChange::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.DifficultyChange)
}

bool DifficultyChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.DifficultyChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.DifficultyChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.DifficultyChange)
  return false;
#undef DO_
}

void DifficultyChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.DifficultyChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:cauchy.DifficultyChange)
}

::google::protobuf::uint8* DifficultyChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.DifficultyChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.DifficultyChange)
  return target;
}

size_t DifficultyChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.DifficultyChange)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DifficultyChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.DifficultyChange)
  GOOGLE_DCHECK_NE(&from, this);
  const DifficultyChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DifficultyChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.DifficultyChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.DifficultyChange)
    MergeFrom(*source);
  }
}

void DifficultyChange::MergeFrom(const DifficultyChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.DifficultyChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DifficultyChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.DifficultyChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DifficultyChange::CopyFrom(const DifficultyChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.DifficultyChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DifficultyChange::IsInitialized() const {
  return true;
}

void DifficultyChange::Swap(DifficultyChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DifficultyChange::InternalSwap(DifficultyChange* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DifficultyChange::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DifficultyChange

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:cauchy.Error)
}

void Error::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:cauchy.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error& Error::default_instance() {
  protobuf_messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.Error)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cauchy.Error.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.Error.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.Error.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.Error)
  size_t total_size = 0;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  message_.Swap(&other->message_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// string message = 1;
void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:cauchy.Error.message)
  return message_.GetNoArena();
}
void Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cauchy.Error.message)
}
#if LANG_CXX11
void Error::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cauchy.Error.message)
}
#endif
void Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cauchy.Error.message)
}
void Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cauchy.Error.message)
}
::std::string* Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:cauchy.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:cauchy.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:cauchy.Error.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int End::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

End::End()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.End)
}
End::End(const End& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:cauchy.End)
}

void End::SharedCtor() {
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

End::~End() {
  // @@protoc_insertion_point(destructor:cauchy.End)
  SharedDtor();
}

void End::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void End::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* End::descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const End& End::default_instance() {
  protobuf_messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

End* End::New(::google::protobuf::Arena* arena) const {
  End* n = new End;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void End::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.End)
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool End::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.End)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cauchy.End.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.End)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.End)
  return false;
#undef DO_
}

void End::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.End)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.End.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.End)
}

::google::protobuf::uint8* End::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.End)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.End.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.End)
  return target;
}

size_t End::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.End)
  size_t total_size = 0;

  // string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void End::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.End)
  GOOGLE_DCHECK_NE(&from, this);
  const End* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const End>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.End)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.End)
    MergeFrom(*source);
  }
}

void End::MergeFrom(const End& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.End)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void End::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.End)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void End::CopyFrom(const End& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.End)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool End::IsInitialized() const {
  return true;
}

void End::Swap(End* other) {
  if (other == this) return;
  InternalSwap(other);
}
void End::InternalSwap(End* other) {
  status_.Swap(&other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata End::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// End

// string status = 1;
void End::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& End::status() const {
  // @@protoc_insertion_point(field_get:cauchy.End.status)
  return status_.GetNoArena();
}
void End::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cauchy.End.status)
}
#if LANG_CXX11
void End::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cauchy.End.status)
}
#endif
void End::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cauchy.End.status)
}
void End::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cauchy.End.status)
}
::std::string* End::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:cauchy.End.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* End::release_status() {
  // @@protoc_insertion_point(field_release:cauchy.End.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void End::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:cauchy.End.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Empty::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.Empty)
}
Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:cauchy.Empty)
}

void Empty::SharedCtor() {
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:cauchy.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Empty& Empty::default_instance() {
  protobuf_messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Empty* Empty::New(::google::protobuf::Arena* arena) const {
  Empty* n = new Empty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.Empty)
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.Empty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cauchy.Empty.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.Empty.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.Empty)
}

::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.Empty.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.Empty)
  size_t total_size = 0;

  // string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  status_.Swap(&other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Empty

// string status = 1;
void Empty::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Empty::status() const {
  // @@protoc_insertion_point(field_get:cauchy.Empty.status)
  return status_.GetNoArena();
}
void Empty::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cauchy.Empty.status)
}
#if LANG_CXX11
void Empty::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cauchy.Empty.status)
}
#endif
void Empty::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cauchy.Empty.status)
}
void Empty::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cauchy.Empty.status)
}
::std::string* Empty::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:cauchy.Empty.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Empty::release_status() {
  // @@protoc_insertion_point(field_release:cauchy.Empty.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Empty::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:cauchy.Empty.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusRequest::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusRequest::StatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.StatusRequest)
}
StatusRequest::StatusRequest(const StatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:cauchy.StatusRequest)
}

void StatusRequest::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StatusRequest::~StatusRequest() {
  // @@protoc_insertion_point(destructor:cauchy.StatusRequest)
  SharedDtor();
}

void StatusRequest::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusRequest::descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatusRequest& StatusRequest::default_instance() {
  protobuf_messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

StatusRequest* StatusRequest::New(::google::protobuf::Arena* arena) const {
  StatusRequest* n = new StatusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.StatusRequest)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.StatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cauchy.StatusRequest.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.StatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.StatusRequest)
  return false;
#undef DO_
}

void StatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.StatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.StatusRequest.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.StatusRequest)
}

::google::protobuf::uint8* StatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.StatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.StatusRequest.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.StatusRequest)
  return target;
}

size_t StatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.StatusRequest)
  size_t total_size = 0;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.StatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.StatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.StatusRequest)
    MergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.StatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void StatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRequest::IsInitialized() const {
  return true;
}

void StatusRequest::Swap(StatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusRequest::InternalSwap(StatusRequest* other) {
  message_.Swap(&other->message_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusRequest::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusRequest

// string message = 1;
void StatusRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StatusRequest::message() const {
  // @@protoc_insertion_point(field_get:cauchy.StatusRequest.message)
  return message_.GetNoArena();
}
void StatusRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cauchy.StatusRequest.message)
}
#if LANG_CXX11
void StatusRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cauchy.StatusRequest.message)
}
#endif
void StatusRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cauchy.StatusRequest.message)
}
void StatusRequest::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cauchy.StatusRequest.message)
}
::std::string* StatusRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:cauchy.StatusRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StatusRequest::release_message() {
  // @@protoc_insertion_point(field_release:cauchy.StatusRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatusRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:cauchy.StatusRequest.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusReply::kMinerFieldNumber;
const int StatusReply::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusReply::StatusReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.StatusReply)
}
StatusReply::StatusReply(const StatusReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats()) {
    stats_ = new ::cauchy::Statistics(*from.stats_);
  } else {
    stats_ = NULL;
  }
  miner_ = from.miner_;
  // @@protoc_insertion_point(copy_constructor:cauchy.StatusReply)
}

void StatusReply::SharedCtor() {
  ::memset(&stats_, 0, reinterpret_cast<char*>(&miner_) -
    reinterpret_cast<char*>(&stats_) + sizeof(miner_));
  _cached_size_ = 0;
}

StatusReply::~StatusReply() {
  // @@protoc_insertion_point(destructor:cauchy.StatusReply)
  SharedDtor();
}

void StatusReply::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stats_;
  }
}

void StatusReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusReply::descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatusReply& StatusReply::default_instance() {
  protobuf_messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

StatusReply* StatusReply::New(::google::protobuf::Arena* arena) const {
  StatusReply* n = new StatusReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusReply::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.StatusReply)
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
  miner_ = 0;
}

bool StatusReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.StatusReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cauchy.StatusReply.Miner miner = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_miner(static_cast< ::cauchy::StatusReply_Miner >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cauchy.Statistics stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.StatusReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.StatusReply)
  return false;
#undef DO_
}

void StatusReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.StatusReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cauchy.StatusReply.Miner miner = 1;
  if (this->miner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->miner(), output);
  }

  // .cauchy.Statistics stats = 2;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stats_, output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.StatusReply)
}

::google::protobuf::uint8* StatusReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.StatusReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cauchy.StatusReply.Miner miner = 1;
  if (this->miner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->miner(), target);
  }

  // .cauchy.Statistics stats = 2;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stats_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.StatusReply)
  return target;
}

size_t StatusReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.StatusReply)
  size_t total_size = 0;

  // .cauchy.Statistics stats = 2;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  // .cauchy.StatusReply.Miner miner = 1;
  if (this->miner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->miner());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.StatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.StatusReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.StatusReply)
    MergeFrom(*source);
  }
}

void StatusReply::MergeFrom(const StatusReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.StatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stats()) {
    mutable_stats()->::cauchy::Statistics::MergeFrom(from.stats());
  }
  if (from.miner() != 0) {
    set_miner(from.miner());
  }
}

void StatusReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.StatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusReply::CopyFrom(const StatusReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.StatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusReply::IsInitialized() const {
  return true;
}

void StatusReply::Swap(StatusReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusReply::InternalSwap(StatusReply* other) {
  std::swap(stats_, other->stats_);
  std::swap(miner_, other->miner_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusReply::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusReply

// .cauchy.StatusReply.Miner miner = 1;
void StatusReply::clear_miner() {
  miner_ = 0;
}
::cauchy::StatusReply_Miner StatusReply::miner() const {
  // @@protoc_insertion_point(field_get:cauchy.StatusReply.miner)
  return static_cast< ::cauchy::StatusReply_Miner >(miner_);
}
void StatusReply::set_miner(::cauchy::StatusReply_Miner value) {
  
  miner_ = value;
  // @@protoc_insertion_point(field_set:cauchy.StatusReply.miner)
}

// .cauchy.Statistics stats = 2;
bool StatusReply::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
void StatusReply::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::cauchy::Statistics& StatusReply::stats() const {
  // @@protoc_insertion_point(field_get:cauchy.StatusReply.stats)
  return stats_ != NULL ? *stats_
                         : *::cauchy::Statistics::internal_default_instance();
}
::cauchy::Statistics* StatusReply::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::cauchy::Statistics;
  }
  // @@protoc_insertion_point(field_mutable:cauchy.StatusReply.stats)
  return stats_;
}
::cauchy::Statistics* StatusReply::release_stats() {
  // @@protoc_insertion_point(field_release:cauchy.StatusReply.stats)
  
  ::cauchy::Statistics* temp = stats_;
  stats_ = NULL;
  return temp;
}
void StatusReply::set_allocated_stats(::cauchy::Statistics* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cauchy.StatusReply.stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemStatus::kRunningFieldNumber;
const int SystemStatus::kMinerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemStatus::SystemStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_messages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.SystemStatus)
}
SystemStatus::SystemStatus(const SystemStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&running_, &from.running_,
    reinterpret_cast<char*>(&miner_) -
    reinterpret_cast<char*>(&running_) + sizeof(miner_));
  // @@protoc_insertion_point(copy_constructor:cauchy.SystemStatus)
}

void SystemStatus::SharedCtor() {
  ::memset(&running_, 0, reinterpret_cast<char*>(&miner_) -
    reinterpret_cast<char*>(&running_) + sizeof(miner_));
  _cached_size_ = 0;
}

SystemStatus::~SystemStatus() {
  // @@protoc_insertion_point(destructor:cauchy.SystemStatus)
  SharedDtor();
}

void SystemStatus::SharedDtor() {
}

void SystemStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemStatus::descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SystemStatus& SystemStatus::default_instance() {
  protobuf_messages_2eproto::InitDefaults();
  return *internal_default_instance();
}

SystemStatus* SystemStatus::New(::google::protobuf::Arena* arena) const {
  SystemStatus* n = new SystemStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SystemStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.SystemStatus)
  ::memset(&running_, 0, reinterpret_cast<char*>(&miner_) -
    reinterpret_cast<char*>(&running_) + sizeof(miner_));
}

bool SystemStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.SystemStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool running = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cauchy.SystemStatus.Miner miner = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_miner(static_cast< ::cauchy::SystemStatus_Miner >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.SystemStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.SystemStatus)
  return false;
#undef DO_
}

void SystemStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.SystemStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool running = 1;
  if (this->running() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->running(), output);
  }

  // .cauchy.SystemStatus.Miner miner = 2;
  if (this->miner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->miner(), output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.SystemStatus)
}

::google::protobuf::uint8* SystemStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.SystemStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool running = 1;
  if (this->running() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->running(), target);
  }

  // .cauchy.SystemStatus.Miner miner = 2;
  if (this->miner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->miner(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.SystemStatus)
  return target;
}

size_t SystemStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.SystemStatus)
  size_t total_size = 0;

  // bool running = 1;
  if (this->running() != 0) {
    total_size += 1 + 1;
  }

  // .cauchy.SystemStatus.Miner miner = 2;
  if (this->miner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->miner());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.SystemStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.SystemStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.SystemStatus)
    MergeFrom(*source);
  }
}

void SystemStatus::MergeFrom(const SystemStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.SystemStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.running() != 0) {
    set_running(from.running());
  }
  if (from.miner() != 0) {
    set_miner(from.miner());
  }
}

void SystemStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.SystemStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemStatus::CopyFrom(const SystemStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.SystemStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemStatus::IsInitialized() const {
  return true;
}

void SystemStatus::Swap(SystemStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemStatus::InternalSwap(SystemStatus* other) {
  std::swap(running_, other->running_);
  std::swap(miner_, other->miner_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SystemStatus::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SystemStatus

// bool running = 1;
void SystemStatus::clear_running() {
  running_ = false;
}
bool SystemStatus::running() const {
  // @@protoc_insertion_point(field_get:cauchy.SystemStatus.running)
  return running_;
}
void SystemStatus::set_running(bool value) {
  
  running_ = value;
  // @@protoc_insertion_point(field_set:cauchy.SystemStatus.running)
}

// .cauchy.SystemStatus.Miner miner = 2;
void SystemStatus::clear_miner() {
  miner_ = 0;
}
::cauchy::SystemStatus_Miner SystemStatus::miner() const {
  // @@protoc_insertion_point(field_get:cauchy.SystemStatus.miner)
  return static_cast< ::cauchy::SystemStatus_Miner >(miner_);
}
void SystemStatus::set_miner(::cauchy::SystemStatus_Miner value) {
  
  miner_ = value;
  // @@protoc_insertion_point(field_set:cauchy.SystemStatus.miner)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cauchy

// @@protoc_insertion_point(global_scope)
