// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: miner.proto
#ifndef GRPC_miner_2eproto__INCLUDED
#define GRPC_miner_2eproto__INCLUDED

#include "miner.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace cauchy {

class MinerStatus final {
 public:
  static constexpr char const* service_full_name() {
    return "cauchy.MinerStatus";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ReportStatus(::grpc::ClientContext* context, const ::cauchy::StatusRequest& request, ::cauchy::Event* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cauchy::Event>> AsyncReportStatus(::grpc::ClientContext* context, const ::cauchy::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cauchy::Event>>(AsyncReportStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status StartMiner(::grpc::ClientContext* context, const ::cauchy::CommandRequest& request, ::cauchy::CommandStatusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cauchy::CommandStatusReply>> AsyncStartMiner(::grpc::ClientContext* context, const ::cauchy::CommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cauchy::CommandStatusReply>>(AsyncStartMinerRaw(context, request, cq));
    }
    virtual ::grpc::Status StopMiner(::grpc::ClientContext* context, const ::cauchy::CommandRequest& request, ::cauchy::CommandStatusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cauchy::CommandStatusReply>> AsyncStopMiner(::grpc::ClientContext* context, const ::cauchy::CommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cauchy::CommandStatusReply>>(AsyncStopMinerRaw(context, request, cq));
    }
    virtual ::grpc::Status SystemStatus(::grpc::ClientContext* context, const ::cauchy::SystemStatusRequest& request, ::cauchy::SystemStatusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cauchy::SystemStatusReply>> AsyncSystemStatus(::grpc::ClientContext* context, const ::cauchy::SystemStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cauchy::SystemStatusReply>>(AsyncSystemStatusRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cauchy::Event>* AsyncReportStatusRaw(::grpc::ClientContext* context, const ::cauchy::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cauchy::CommandStatusReply>* AsyncStartMinerRaw(::grpc::ClientContext* context, const ::cauchy::CommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cauchy::CommandStatusReply>* AsyncStopMinerRaw(::grpc::ClientContext* context, const ::cauchy::CommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cauchy::SystemStatusReply>* AsyncSystemStatusRaw(::grpc::ClientContext* context, const ::cauchy::SystemStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ReportStatus(::grpc::ClientContext* context, const ::cauchy::StatusRequest& request, ::cauchy::Event* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cauchy::Event>> AsyncReportStatus(::grpc::ClientContext* context, const ::cauchy::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cauchy::Event>>(AsyncReportStatusRaw(context, request, cq));
    }
    ::grpc::Status StartMiner(::grpc::ClientContext* context, const ::cauchy::CommandRequest& request, ::cauchy::CommandStatusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cauchy::CommandStatusReply>> AsyncStartMiner(::grpc::ClientContext* context, const ::cauchy::CommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cauchy::CommandStatusReply>>(AsyncStartMinerRaw(context, request, cq));
    }
    ::grpc::Status StopMiner(::grpc::ClientContext* context, const ::cauchy::CommandRequest& request, ::cauchy::CommandStatusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cauchy::CommandStatusReply>> AsyncStopMiner(::grpc::ClientContext* context, const ::cauchy::CommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cauchy::CommandStatusReply>>(AsyncStopMinerRaw(context, request, cq));
    }
    ::grpc::Status SystemStatus(::grpc::ClientContext* context, const ::cauchy::SystemStatusRequest& request, ::cauchy::SystemStatusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cauchy::SystemStatusReply>> AsyncSystemStatus(::grpc::ClientContext* context, const ::cauchy::SystemStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cauchy::SystemStatusReply>>(AsyncSystemStatusRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::cauchy::Event>* AsyncReportStatusRaw(::grpc::ClientContext* context, const ::cauchy::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cauchy::CommandStatusReply>* AsyncStartMinerRaw(::grpc::ClientContext* context, const ::cauchy::CommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cauchy::CommandStatusReply>* AsyncStopMinerRaw(::grpc::ClientContext* context, const ::cauchy::CommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cauchy::SystemStatusReply>* AsyncSystemStatusRaw(::grpc::ClientContext* context, const ::cauchy::SystemStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_ReportStatus_;
    const ::grpc::RpcMethod rpcmethod_StartMiner_;
    const ::grpc::RpcMethod rpcmethod_StopMiner_;
    const ::grpc::RpcMethod rpcmethod_SystemStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ReportStatus(::grpc::ServerContext* context, const ::cauchy::StatusRequest* request, ::cauchy::Event* response);
    virtual ::grpc::Status StartMiner(::grpc::ServerContext* context, const ::cauchy::CommandRequest* request, ::cauchy::CommandStatusReply* response);
    virtual ::grpc::Status StopMiner(::grpc::ServerContext* context, const ::cauchy::CommandRequest* request, ::cauchy::CommandStatusReply* response);
    virtual ::grpc::Status SystemStatus(::grpc::ServerContext* context, const ::cauchy::SystemStatusRequest* request, ::cauchy::SystemStatusReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReportStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReportStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportStatus(::grpc::ServerContext* context, const ::cauchy::StatusRequest* request, ::cauchy::Event* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportStatus(::grpc::ServerContext* context, ::cauchy::StatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::cauchy::Event>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartMiner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StartMiner() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StartMiner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartMiner(::grpc::ServerContext* context, const ::cauchy::CommandRequest* request, ::cauchy::CommandStatusReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartMiner(::grpc::ServerContext* context, ::cauchy::CommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::cauchy::CommandStatusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopMiner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StopMiner() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StopMiner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMiner(::grpc::ServerContext* context, const ::cauchy::CommandRequest* request, ::cauchy::CommandStatusReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopMiner(::grpc::ServerContext* context, ::cauchy::CommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::cauchy::CommandStatusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SystemStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SystemStatus() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SystemStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemStatus(::grpc::ServerContext* context, const ::cauchy::SystemStatusRequest* request, ::cauchy::SystemStatusReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSystemStatus(::grpc::ServerContext* context, ::cauchy::SystemStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::cauchy::SystemStatusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReportStatus<WithAsyncMethod_StartMiner<WithAsyncMethod_StopMiner<WithAsyncMethod_SystemStatus<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ReportStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReportStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReportStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportStatus(::grpc::ServerContext* context, const ::cauchy::StatusRequest* request, ::cauchy::Event* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartMiner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StartMiner() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StartMiner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartMiner(::grpc::ServerContext* context, const ::cauchy::CommandRequest* request, ::cauchy::CommandStatusReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopMiner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StopMiner() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StopMiner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMiner(::grpc::ServerContext* context, const ::cauchy::CommandRequest* request, ::cauchy::CommandStatusReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SystemStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SystemStatus() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SystemStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemStatus(::grpc::ServerContext* context, const ::cauchy::SystemStatusRequest* request, ::cauchy::SystemStatusReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReportStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::cauchy::StatusRequest, ::cauchy::Event>(std::bind(&WithStreamedUnaryMethod_ReportStatus<BaseClass>::StreamedReportStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReportStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportStatus(::grpc::ServerContext* context, const ::cauchy::StatusRequest* request, ::cauchy::Event* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cauchy::StatusRequest,::cauchy::Event>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartMiner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StartMiner() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::cauchy::CommandRequest, ::cauchy::CommandStatusReply>(std::bind(&WithStreamedUnaryMethod_StartMiner<BaseClass>::StreamedStartMiner, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartMiner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartMiner(::grpc::ServerContext* context, const ::cauchy::CommandRequest* request, ::cauchy::CommandStatusReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartMiner(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cauchy::CommandRequest,::cauchy::CommandStatusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopMiner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StopMiner() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::cauchy::CommandRequest, ::cauchy::CommandStatusReply>(std::bind(&WithStreamedUnaryMethod_StopMiner<BaseClass>::StreamedStopMiner, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopMiner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopMiner(::grpc::ServerContext* context, const ::cauchy::CommandRequest* request, ::cauchy::CommandStatusReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopMiner(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cauchy::CommandRequest,::cauchy::CommandStatusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SystemStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SystemStatus() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::cauchy::SystemStatusRequest, ::cauchy::SystemStatusReply>(std::bind(&WithStreamedUnaryMethod_SystemStatus<BaseClass>::StreamedSystemStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SystemStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SystemStatus(::grpc::ServerContext* context, const ::cauchy::SystemStatusRequest* request, ::cauchy::SystemStatusReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSystemStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cauchy::SystemStatusRequest,::cauchy::SystemStatusReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReportStatus<WithStreamedUnaryMethod_StartMiner<WithStreamedUnaryMethod_StopMiner<WithStreamedUnaryMethod_SystemStatus<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReportStatus<WithStreamedUnaryMethod_StartMiner<WithStreamedUnaryMethod_StopMiner<WithStreamedUnaryMethod_SystemStatus<Service > > > > StreamedService;
};

}  // namespace cauchy


#endif  // GRPC_miner_2eproto__INCLUDED
