// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cauchy {
class CommandRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommandRequest> {
} _CommandRequest_default_instance_;
class CommandStatusReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommandStatusReply> {
} _CommandStatusReply_default_instance_;
class ConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Config> {
} _Config_default_instance_;
class SystemStatusRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SystemStatusRequest> {
} _SystemStatusRequest_default_instance_;
class SystemStatusReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SystemStatusReply> {
} _SystemStatusReply_default_instance_;

namespace protobuf_command_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRequest, miner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRequest, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStatusReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStatusReply, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, config_str_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStatusRequest, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStatusReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStatusReply, running_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStatusReply, miner_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CommandRequest)},
  { 7, -1, sizeof(CommandStatusReply)},
  { 13, -1, sizeof(Config)},
  { 19, -1, sizeof(SystemStatusRequest)},
  { 25, -1, sizeof(SystemStatusReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommandRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommandStatusReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SystemStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SystemStatusReply_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "command.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _CommandRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CommandStatusReply_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Config_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SystemStatusRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SystemStatusReply_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CommandRequest_default_instance_.DefaultConstruct();
  _CommandStatusReply_default_instance_.DefaultConstruct();
  _Config_default_instance_.DefaultConstruct();
  _SystemStatusRequest_default_instance_.DefaultConstruct();
  _SystemStatusReply_default_instance_.DefaultConstruct();
  _CommandRequest_default_instance_.get_mutable()->config_ = const_cast< ::cauchy::Config*>(
      ::cauchy::Config::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rcommand.proto\022\006cauchy\"\227\001\n\016CommandReque"
      "st\022+\n\005miner\030\001 \001(\0162\034.cauchy.CommandReques"
      "t.Miner\022\036\n\006config\030\002 \001(\0132\016.cauchy.Config\""
      "8\n\005Miner\022\013\n\007XMR_CPU\020\000\022\014\n\010XMR_CUDA\020\001\022\013\n\007X"
      "MR_AMD\020\002\022\007\n\003ETH\020\003\"%\n\022CommandStatusReply\022"
      "\017\n\007message\030\001 \001(\t\"\034\n\006Config\022\022\n\nconfig_str"
      "\030\001 \001(\t\"!\n\023SystemStatusRequest\022\n\n\002id\030\001 \001("
      "\005\"\216\001\n\021SystemStatusReply\022\017\n\007running\030\001 \001(\010"
      "\022.\n\005miner\030\002 \001(\0162\037.cauchy.SystemStatusRep"
      "ly.Miner\"8\n\005Miner\022\013\n\007XMR_CPU\020\000\022\014\n\010XMR_CU"
      "DA\020\001\022\013\n\007XMR_AMD\020\002\022\007\n\003ETH\020\003B\024\n\014cauchy.min"
      "er\242\002\003CHYb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 456);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "command.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_command_2eproto

const ::google::protobuf::EnumDescriptor* CommandRequest_Miner_descriptor() {
  protobuf_command_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_command_2eproto::file_level_enum_descriptors[0];
}
bool CommandRequest_Miner_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommandRequest_Miner CommandRequest::XMR_CPU;
const CommandRequest_Miner CommandRequest::XMR_CUDA;
const CommandRequest_Miner CommandRequest::XMR_AMD;
const CommandRequest_Miner CommandRequest::ETH;
const CommandRequest_Miner CommandRequest::Miner_MIN;
const CommandRequest_Miner CommandRequest::Miner_MAX;
const int CommandRequest::Miner_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemStatusReply_Miner_descriptor() {
  protobuf_command_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_command_2eproto::file_level_enum_descriptors[1];
}
bool SystemStatusReply_Miner_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemStatusReply_Miner SystemStatusReply::XMR_CPU;
const SystemStatusReply_Miner SystemStatusReply::XMR_CUDA;
const SystemStatusReply_Miner SystemStatusReply::XMR_AMD;
const SystemStatusReply_Miner SystemStatusReply::ETH;
const SystemStatusReply_Miner SystemStatusReply::Miner_MIN;
const SystemStatusReply_Miner SystemStatusReply::Miner_MAX;
const int SystemStatusReply::Miner_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommandRequest::kMinerFieldNumber;
const int CommandRequest::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandRequest::CommandRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_command_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.CommandRequest)
}
CommandRequest::CommandRequest(const CommandRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::cauchy::Config(*from.config_);
  } else {
    config_ = NULL;
  }
  miner_ = from.miner_;
  // @@protoc_insertion_point(copy_constructor:cauchy.CommandRequest)
}

void CommandRequest::SharedCtor() {
  ::memset(&config_, 0, reinterpret_cast<char*>(&miner_) -
    reinterpret_cast<char*>(&config_) + sizeof(miner_));
  _cached_size_ = 0;
}

CommandRequest::~CommandRequest() {
  // @@protoc_insertion_point(destructor:cauchy.CommandRequest)
  SharedDtor();
}

void CommandRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete config_;
  }
}

void CommandRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRequest::descriptor() {
  protobuf_command_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_command_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommandRequest& CommandRequest::default_instance() {
  protobuf_command_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommandRequest* CommandRequest::New(::google::protobuf::Arena* arena) const {
  CommandRequest* n = new CommandRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.CommandRequest)
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  miner_ = 0;
}

bool CommandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.CommandRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cauchy.CommandRequest.Miner miner = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_miner(static_cast< ::cauchy::CommandRequest_Miner >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cauchy.Config config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.CommandRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.CommandRequest)
  return false;
#undef DO_
}

void CommandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.CommandRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cauchy.CommandRequest.Miner miner = 1;
  if (this->miner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->miner(), output);
  }

  // .cauchy.Config config = 2;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_, output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.CommandRequest)
}

::google::protobuf::uint8* CommandRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.CommandRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cauchy.CommandRequest.Miner miner = 1;
  if (this->miner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->miner(), target);
  }

  // .cauchy.Config config = 2;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->config_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.CommandRequest)
  return target;
}

size_t CommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.CommandRequest)
  size_t total_size = 0;

  // .cauchy.Config config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // .cauchy.CommandRequest.Miner miner = 1;
  if (this->miner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->miner());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.CommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.CommandRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.CommandRequest)
    MergeFrom(*source);
  }
}

void CommandRequest::MergeFrom(const CommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.CommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::cauchy::Config::MergeFrom(from.config());
  }
  if (from.miner() != 0) {
    set_miner(from.miner());
  }
}

void CommandRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.CommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRequest::CopyFrom(const CommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.CommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRequest::IsInitialized() const {
  return true;
}

void CommandRequest::Swap(CommandRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandRequest::InternalSwap(CommandRequest* other) {
  std::swap(config_, other->config_);
  std::swap(miner_, other->miner_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommandRequest::GetMetadata() const {
  protobuf_command_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_command_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommandRequest

// .cauchy.CommandRequest.Miner miner = 1;
void CommandRequest::clear_miner() {
  miner_ = 0;
}
::cauchy::CommandRequest_Miner CommandRequest::miner() const {
  // @@protoc_insertion_point(field_get:cauchy.CommandRequest.miner)
  return static_cast< ::cauchy::CommandRequest_Miner >(miner_);
}
void CommandRequest::set_miner(::cauchy::CommandRequest_Miner value) {
  
  miner_ = value;
  // @@protoc_insertion_point(field_set:cauchy.CommandRequest.miner)
}

// .cauchy.Config config = 2;
bool CommandRequest::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void CommandRequest::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::cauchy::Config& CommandRequest::config() const {
  // @@protoc_insertion_point(field_get:cauchy.CommandRequest.config)
  return config_ != NULL ? *config_
                         : *::cauchy::Config::internal_default_instance();
}
::cauchy::Config* CommandRequest::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::cauchy::Config;
  }
  // @@protoc_insertion_point(field_mutable:cauchy.CommandRequest.config)
  return config_;
}
::cauchy::Config* CommandRequest::release_config() {
  // @@protoc_insertion_point(field_release:cauchy.CommandRequest.config)
  
  ::cauchy::Config* temp = config_;
  config_ = NULL;
  return temp;
}
void CommandRequest::set_allocated_config(::cauchy::Config* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cauchy.CommandRequest.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommandStatusReply::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandStatusReply::CommandStatusReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_command_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.CommandStatusReply)
}
CommandStatusReply::CommandStatusReply(const CommandStatusReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:cauchy.CommandStatusReply)
}

void CommandStatusReply::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CommandStatusReply::~CommandStatusReply() {
  // @@protoc_insertion_point(destructor:cauchy.CommandStatusReply)
  SharedDtor();
}

void CommandStatusReply::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommandStatusReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandStatusReply::descriptor() {
  protobuf_command_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_command_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommandStatusReply& CommandStatusReply::default_instance() {
  protobuf_command_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommandStatusReply* CommandStatusReply::New(::google::protobuf::Arena* arena) const {
  CommandStatusReply* n = new CommandStatusReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommandStatusReply::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.CommandStatusReply)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CommandStatusReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.CommandStatusReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cauchy.CommandStatusReply.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.CommandStatusReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.CommandStatusReply)
  return false;
#undef DO_
}

void CommandStatusReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.CommandStatusReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.CommandStatusReply.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.CommandStatusReply)
}

::google::protobuf::uint8* CommandStatusReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.CommandStatusReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.CommandStatusReply.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.CommandStatusReply)
  return target;
}

size_t CommandStatusReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.CommandStatusReply)
  size_t total_size = 0;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandStatusReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.CommandStatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandStatusReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandStatusReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.CommandStatusReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.CommandStatusReply)
    MergeFrom(*source);
  }
}

void CommandStatusReply::MergeFrom(const CommandStatusReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.CommandStatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void CommandStatusReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.CommandStatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandStatusReply::CopyFrom(const CommandStatusReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.CommandStatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStatusReply::IsInitialized() const {
  return true;
}

void CommandStatusReply::Swap(CommandStatusReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandStatusReply::InternalSwap(CommandStatusReply* other) {
  message_.Swap(&other->message_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommandStatusReply::GetMetadata() const {
  protobuf_command_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_command_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommandStatusReply

// string message = 1;
void CommandStatusReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommandStatusReply::message() const {
  // @@protoc_insertion_point(field_get:cauchy.CommandStatusReply.message)
  return message_.GetNoArena();
}
void CommandStatusReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cauchy.CommandStatusReply.message)
}
#if LANG_CXX11
void CommandStatusReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cauchy.CommandStatusReply.message)
}
#endif
void CommandStatusReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cauchy.CommandStatusReply.message)
}
void CommandStatusReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cauchy.CommandStatusReply.message)
}
::std::string* CommandStatusReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:cauchy.CommandStatusReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommandStatusReply::release_message() {
  // @@protoc_insertion_point(field_release:cauchy.CommandStatusReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommandStatusReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:cauchy.CommandStatusReply.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kConfigStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_command_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.Config)
}
Config::Config(const Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.config_str().size() > 0) {
    config_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_str_);
  }
  // @@protoc_insertion_point(copy_constructor:cauchy.Config)
}

void Config::SharedCtor() {
  config_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:cauchy.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  config_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  protobuf_command_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_command_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Config& Config::default_instance() {
  protobuf_command_2eproto::InitDefaults();
  return *internal_default_instance();
}

Config* Config::New(::google::protobuf::Arena* arena) const {
  Config* n = new Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.Config)
  config_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string config_str = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->config_str().data(), this->config_str().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cauchy.Config.config_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string config_str = 1;
  if (this->config_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config_str().data(), this->config_str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.Config.config_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->config_str(), output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.Config)
}

::google::protobuf::uint8* Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string config_str = 1;
  if (this->config_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config_str().data(), this->config_str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cauchy.Config.config_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->config_str(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.Config)
  size_t total_size = 0;

  // string config_str = 1;
  if (this->config_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config_str());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_str().size() > 0) {

    config_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_str_);
  }
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  config_str_.Swap(&other->config_str_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_command_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_command_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Config

// string config_str = 1;
void Config::clear_config_str() {
  config_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Config::config_str() const {
  // @@protoc_insertion_point(field_get:cauchy.Config.config_str)
  return config_str_.GetNoArena();
}
void Config::set_config_str(const ::std::string& value) {
  
  config_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cauchy.Config.config_str)
}
#if LANG_CXX11
void Config::set_config_str(::std::string&& value) {
  
  config_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cauchy.Config.config_str)
}
#endif
void Config::set_config_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cauchy.Config.config_str)
}
void Config::set_config_str(const char* value, size_t size) {
  
  config_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cauchy.Config.config_str)
}
::std::string* Config::mutable_config_str() {
  
  // @@protoc_insertion_point(field_mutable:cauchy.Config.config_str)
  return config_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Config::release_config_str() {
  // @@protoc_insertion_point(field_release:cauchy.Config.config_str)
  
  return config_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Config::set_allocated_config_str(::std::string* config_str) {
  if (config_str != NULL) {
    
  } else {
    
  }
  config_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_str);
  // @@protoc_insertion_point(field_set_allocated:cauchy.Config.config_str)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemStatusRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemStatusRequest::SystemStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_command_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.SystemStatusRequest)
}
SystemStatusRequest::SystemStatusRequest(const SystemStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:cauchy.SystemStatusRequest)
}

void SystemStatusRequest::SharedCtor() {
  id_ = 0;
  _cached_size_ = 0;
}

SystemStatusRequest::~SystemStatusRequest() {
  // @@protoc_insertion_point(destructor:cauchy.SystemStatusRequest)
  SharedDtor();
}

void SystemStatusRequest::SharedDtor() {
}

void SystemStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemStatusRequest::descriptor() {
  protobuf_command_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_command_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SystemStatusRequest& SystemStatusRequest::default_instance() {
  protobuf_command_2eproto::InitDefaults();
  return *internal_default_instance();
}

SystemStatusRequest* SystemStatusRequest::New(::google::protobuf::Arena* arena) const {
  SystemStatusRequest* n = new SystemStatusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SystemStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.SystemStatusRequest)
  id_ = 0;
}

bool SystemStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.SystemStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.SystemStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.SystemStatusRequest)
  return false;
#undef DO_
}

void SystemStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.SystemStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.SystemStatusRequest)
}

::google::protobuf::uint8* SystemStatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.SystemStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.SystemStatusRequest)
  return target;
}

size_t SystemStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.SystemStatusRequest)
  size_t total_size = 0;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.SystemStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemStatusRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemStatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.SystemStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.SystemStatusRequest)
    MergeFrom(*source);
  }
}

void SystemStatusRequest::MergeFrom(const SystemStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.SystemStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void SystemStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.SystemStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemStatusRequest::CopyFrom(const SystemStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.SystemStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemStatusRequest::IsInitialized() const {
  return true;
}

void SystemStatusRequest::Swap(SystemStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemStatusRequest::InternalSwap(SystemStatusRequest* other) {
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SystemStatusRequest::GetMetadata() const {
  protobuf_command_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_command_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SystemStatusRequest

// int32 id = 1;
void SystemStatusRequest::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 SystemStatusRequest::id() const {
  // @@protoc_insertion_point(field_get:cauchy.SystemStatusRequest.id)
  return id_;
}
void SystemStatusRequest::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cauchy.SystemStatusRequest.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemStatusReply::kRunningFieldNumber;
const int SystemStatusReply::kMinerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemStatusReply::SystemStatusReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_command_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cauchy.SystemStatusReply)
}
SystemStatusReply::SystemStatusReply(const SystemStatusReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&running_, &from.running_,
    reinterpret_cast<char*>(&miner_) -
    reinterpret_cast<char*>(&running_) + sizeof(miner_));
  // @@protoc_insertion_point(copy_constructor:cauchy.SystemStatusReply)
}

void SystemStatusReply::SharedCtor() {
  ::memset(&running_, 0, reinterpret_cast<char*>(&miner_) -
    reinterpret_cast<char*>(&running_) + sizeof(miner_));
  _cached_size_ = 0;
}

SystemStatusReply::~SystemStatusReply() {
  // @@protoc_insertion_point(destructor:cauchy.SystemStatusReply)
  SharedDtor();
}

void SystemStatusReply::SharedDtor() {
}

void SystemStatusReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemStatusReply::descriptor() {
  protobuf_command_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_command_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SystemStatusReply& SystemStatusReply::default_instance() {
  protobuf_command_2eproto::InitDefaults();
  return *internal_default_instance();
}

SystemStatusReply* SystemStatusReply::New(::google::protobuf::Arena* arena) const {
  SystemStatusReply* n = new SystemStatusReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SystemStatusReply::Clear() {
// @@protoc_insertion_point(message_clear_start:cauchy.SystemStatusReply)
  ::memset(&running_, 0, reinterpret_cast<char*>(&miner_) -
    reinterpret_cast<char*>(&running_) + sizeof(miner_));
}

bool SystemStatusReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cauchy.SystemStatusReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool running = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cauchy.SystemStatusReply.Miner miner = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_miner(static_cast< ::cauchy::SystemStatusReply_Miner >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cauchy.SystemStatusReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cauchy.SystemStatusReply)
  return false;
#undef DO_
}

void SystemStatusReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cauchy.SystemStatusReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool running = 1;
  if (this->running() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->running(), output);
  }

  // .cauchy.SystemStatusReply.Miner miner = 2;
  if (this->miner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->miner(), output);
  }

  // @@protoc_insertion_point(serialize_end:cauchy.SystemStatusReply)
}

::google::protobuf::uint8* SystemStatusReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cauchy.SystemStatusReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool running = 1;
  if (this->running() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->running(), target);
  }

  // .cauchy.SystemStatusReply.Miner miner = 2;
  if (this->miner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->miner(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cauchy.SystemStatusReply)
  return target;
}

size_t SystemStatusReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cauchy.SystemStatusReply)
  size_t total_size = 0;

  // bool running = 1;
  if (this->running() != 0) {
    total_size += 1 + 1;
  }

  // .cauchy.SystemStatusReply.Miner miner = 2;
  if (this->miner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->miner());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemStatusReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cauchy.SystemStatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemStatusReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemStatusReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cauchy.SystemStatusReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cauchy.SystemStatusReply)
    MergeFrom(*source);
  }
}

void SystemStatusReply::MergeFrom(const SystemStatusReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cauchy.SystemStatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.running() != 0) {
    set_running(from.running());
  }
  if (from.miner() != 0) {
    set_miner(from.miner());
  }
}

void SystemStatusReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cauchy.SystemStatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemStatusReply::CopyFrom(const SystemStatusReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cauchy.SystemStatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemStatusReply::IsInitialized() const {
  return true;
}

void SystemStatusReply::Swap(SystemStatusReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemStatusReply::InternalSwap(SystemStatusReply* other) {
  std::swap(running_, other->running_);
  std::swap(miner_, other->miner_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SystemStatusReply::GetMetadata() const {
  protobuf_command_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_command_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SystemStatusReply

// bool running = 1;
void SystemStatusReply::clear_running() {
  running_ = false;
}
bool SystemStatusReply::running() const {
  // @@protoc_insertion_point(field_get:cauchy.SystemStatusReply.running)
  return running_;
}
void SystemStatusReply::set_running(bool value) {
  
  running_ = value;
  // @@protoc_insertion_point(field_set:cauchy.SystemStatusReply.running)
}

// .cauchy.SystemStatusReply.Miner miner = 2;
void SystemStatusReply::clear_miner() {
  miner_ = 0;
}
::cauchy::SystemStatusReply_Miner SystemStatusReply::miner() const {
  // @@protoc_insertion_point(field_get:cauchy.SystemStatusReply.miner)
  return static_cast< ::cauchy::SystemStatusReply_Miner >(miner_);
}
void SystemStatusReply::set_miner(::cauchy::SystemStatusReply_Miner value) {
  
  miner_ = value;
  // @@protoc_insertion_point(field_set:cauchy.SystemStatusReply.miner)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cauchy

// @@protoc_insertion_point(global_scope)
