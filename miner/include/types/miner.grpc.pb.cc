// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: miner.proto

#include "miner.pb.h"
#include "miner.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace cauchy {

static const char* MinerStatus_method_names[] = {
  "/cauchy.MinerStatus/ReportStatus",
  "/cauchy.MinerStatus/StartMiner",
  "/cauchy.MinerStatus/StopMiner",
  "/cauchy.MinerStatus/SystemStatus",
};

std::unique_ptr< MinerStatus::Stub> MinerStatus::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< MinerStatus::Stub> stub(new MinerStatus::Stub(channel));
  return stub;
}

MinerStatus::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ReportStatus_(MinerStatus_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartMiner_(MinerStatus_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopMiner_(MinerStatus_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SystemStatus_(MinerStatus_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MinerStatus::Stub::ReportStatus(::grpc::ClientContext* context, const ::cauchy::StatusRequest& request, ::cauchy::Event* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ReportStatus_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::cauchy::Event>* MinerStatus::Stub::AsyncReportStatusRaw(::grpc::ClientContext* context, const ::cauchy::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cauchy::Event>::Create(channel_.get(), cq, rpcmethod_ReportStatus_, context, request);
}

::grpc::Status MinerStatus::Stub::StartMiner(::grpc::ClientContext* context, const ::cauchy::CommandRequest& request, ::cauchy::CommandStatusReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_StartMiner_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::cauchy::CommandStatusReply>* MinerStatus::Stub::AsyncStartMinerRaw(::grpc::ClientContext* context, const ::cauchy::CommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cauchy::CommandStatusReply>::Create(channel_.get(), cq, rpcmethod_StartMiner_, context, request);
}

::grpc::Status MinerStatus::Stub::StopMiner(::grpc::ClientContext* context, const ::cauchy::CommandRequest& request, ::cauchy::CommandStatusReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_StopMiner_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::cauchy::CommandStatusReply>* MinerStatus::Stub::AsyncStopMinerRaw(::grpc::ClientContext* context, const ::cauchy::CommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cauchy::CommandStatusReply>::Create(channel_.get(), cq, rpcmethod_StopMiner_, context, request);
}

::grpc::Status MinerStatus::Stub::SystemStatus(::grpc::ClientContext* context, const ::cauchy::SystemStatusRequest& request, ::cauchy::SystemStatusReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SystemStatus_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::cauchy::SystemStatusReply>* MinerStatus::Stub::AsyncSystemStatusRaw(::grpc::ClientContext* context, const ::cauchy::SystemStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cauchy::SystemStatusReply>::Create(channel_.get(), cq, rpcmethod_SystemStatus_, context, request);
}

MinerStatus::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      MinerStatus_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MinerStatus::Service, ::cauchy::StatusRequest, ::cauchy::Event>(
          std::mem_fn(&MinerStatus::Service::ReportStatus), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MinerStatus_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MinerStatus::Service, ::cauchy::CommandRequest, ::cauchy::CommandStatusReply>(
          std::mem_fn(&MinerStatus::Service::StartMiner), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MinerStatus_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MinerStatus::Service, ::cauchy::CommandRequest, ::cauchy::CommandStatusReply>(
          std::mem_fn(&MinerStatus::Service::StopMiner), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MinerStatus_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MinerStatus::Service, ::cauchy::SystemStatusRequest, ::cauchy::SystemStatusReply>(
          std::mem_fn(&MinerStatus::Service::SystemStatus), this)));
}

MinerStatus::Service::~Service() {
}

::grpc::Status MinerStatus::Service::ReportStatus(::grpc::ServerContext* context, const ::cauchy::StatusRequest* request, ::cauchy::Event* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MinerStatus::Service::StartMiner(::grpc::ServerContext* context, const ::cauchy::CommandRequest* request, ::cauchy::CommandStatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MinerStatus::Service::StopMiner(::grpc::ServerContext* context, const ::cauchy::CommandRequest* request, ::cauchy::CommandStatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MinerStatus::Service::SystemStatus(::grpc::ServerContext* context, const ::cauchy::SystemStatusRequest* request, ::cauchy::SystemStatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cauchy

